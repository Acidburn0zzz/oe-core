From b887be75657a5e4b5186338d90ab10f2841f77f7 Mon Sep 17 00:00:00 2001
From: Koen Kooi <koen@dominion.thruhere.net>
Date: Wed, 3 Jul 2013 13:25:35 +0200
Subject: [PATCH] gas: doc: sync with binutils git

Signed-off-by: Koen Kooi <koen@dominion.thruhere.net>
---
 gas/doc/all.texi          |   6 +
 gas/doc/c-alpha.texi      |  14 +-
 gas/doc/c-arc.texi        |  30 ++--
 gas/doc/c-arm.texi        |  98 +++++++------
 gas/doc/c-avr.texi        |  90 ++++++------
 gas/doc/c-bfin.texi       |  14 +-
 gas/doc/c-cr16.texi       |  65 +++++----
 gas/doc/c-d10v.texi       |  36 ++---
 gas/doc/c-d30v.texi       |  20 +--
 gas/doc/c-h8300.texi      |   8 +-
 gas/doc/c-hppa.texi       |  10 +-
 gas/doc/c-i370.texi       |  56 ++++----
 gas/doc/c-i386.texi       |  36 +++--
 gas/doc/c-i860.texi       |  10 +-
 gas/doc/c-m32c.texi       |  14 +-
 gas/doc/c-m32r.texi       |  20 +--
 gas/doc/c-m68hc11.texi    |  28 +++-
 gas/doc/c-m68k.texi       |   6 +-
 gas/doc/c-microblaze.texi |  22 +--
 gas/doc/c-mips.texi       | 341 ++++++++++++++++++++++++++++++++--------------
 gas/doc/c-msp430.texi     |  88 +++++++-----
 gas/doc/c-mt.texi         |   2 +-
 gas/doc/c-ppc.texi        |  10 ++
 gas/doc/c-rx.texi         |  74 +++++++++-
 gas/doc/c-s390.texi       |  39 ++++--
 gas/doc/c-score.texi      |  56 ++++----
 gas/doc/c-sh.texi         | 165 +++++++++++-----------
 gas/doc/c-sh64.texi       |   8 +-
 gas/doc/c-sparc.texi      |  17 ++-
 gas/doc/c-tic54x.texi     |  50 +++----
 gas/doc/c-tic6x.texi      |   3 +-
 gas/doc/c-tilegx.texi     | 122 ++++++++---------
 gas/doc/c-tilepro.texi    |  35 +++++
 gas/doc/c-v850.texi       |  55 +++++++-
 gas/doc/c-xc16x.texi      |   4 +-
 gas/doc/c-xtensa.texi     |   4 +-
 gas/doc/c-z80.texi        |  36 ++---
 gas/doc/h8.texi           |   5 +
 gas/doc/internals.texi    |   5 +-
 39 files changed, 1045 insertions(+), 657 deletions(-)

diff --git a/gas/doc/all.texi b/gas/doc/all.texi
index 6f935ad..99dbf8f 100644
--- a/gas/doc/all.texi
+++ b/gas/doc/all.texi
@@ -26,6 +26,7 @@
 
 @c CPUs of interest
 @c ================
+@set AARCH64
 @set ALPHA
 @set ARC
 @set ARM
@@ -35,6 +36,7 @@
 @set CRIS
 @set D10V
 @set D30V
+@set EPIPHANY
 @set H8/300
 @set HPPA
 @set I370
@@ -50,15 +52,18 @@
 @set M68HC11
 @set M680X0
 @set MCORE
+@set METAG
 @set MICROBLAZE
 @set MIPS
 @set MMIX
 @set MS1
 @set MSP430
+@set NIOSII
 @set NS32K
 @set PDP11
 @set PJ
 @set PPC
+@set RL78
 @set RX
 @set S390
 @set SCORE
@@ -70,6 +75,7 @@
 @set TILEPRO
 @set V850
 @set VAX
+@set XGATE
 @set XSTORMY16
 @set XTENSA
 @set Z80
diff --git a/gas/doc/c-alpha.texi b/gas/doc/c-alpha.texi
index 8e2c11b..dd48413 100644
--- a/gas/doc/c-alpha.texi
+++ b/gas/doc/c-alpha.texi
@@ -48,7 +48,7 @@ assemble an instruction which will not execute on the target processor,
 the assembler may either expand the instruction as a macro or issue an
 error message.  This option is equivalent to the @code{.arch} directive.
 
-The following processor names are recognized: 
+The following processor names are recognized:
 @code{21064},
 @code{21064a},
 @code{21066},
@@ -167,7 +167,7 @@ The 32 floating-point registers are referred to as @samp{$f@var{n}}.
 @cindex relocations, Alpha
 
 Some of these relocations are available for ECOFF, but mostly
-only for ELF.  They are modeled after the relocation format 
+only for ELF.  They are modeled after the relocation format
 introduced in Digital Unix 4.0, but there are additions.
 
 The format is @samp{!@var{tag}} or @samp{!@var{tag}!@var{number}}
@@ -243,13 +243,13 @@ jsr  $26,($27),foo  !lituse_jsr!1
 
 @item !lituse_tlsgd!@var{N}
 Used with a register branch format instruction to indicate that the
-literal is the call to @code{__tls_get_addr} used to compute the 
+literal is the call to @code{__tls_get_addr} used to compute the
 address of the thread-local storage variable whose descriptor was
 loaded with @code{!tlsgd!@var{N}}.
 
 @item !lituse_tlsldm!@var{N}
 Used with a register branch format instruction to indicate that the
-literal is the call to @code{__tls_get_addr} used to compute the 
+literal is the call to @code{__tls_get_addr} used to compute the
 address of the base of the thread-local storage block for the current
 module.  The descriptor for the module must have been loaded with
 @code{!tlsldm!@var{N}}.
@@ -259,7 +259,7 @@ Used with @code{ldah} and @code{lda} to load the GP from the current
 address, a-la the @code{ldgp} macro.  The source register for the
 @code{ldah} instruction must contain the address of the @code{ldah}
 instruction.  There must be exactly one @code{lda} instruction paired
-with the @code{ldah} instruction, though it may appear anywhere in 
+with the @code{ldah} instruction, though it may appear anywhere in
 the instruction stream.  The immediate operands must be zero.
 
 @example
@@ -401,8 +401,8 @@ used in some non-standard way and so the linker cannot elide the load of
 the procedure vector during relaxation.
 
 @item .usepv @var{function}, @var{which}
-Used to indicate the use of the @code{$27} register, similar to 
-@code{.prologue}, but without the other semantics of needing to 
+Used to indicate the use of the @code{$27} register, similar to
+@code{.prologue}, but without the other semantics of needing to
 be inside an open @code{.ent}/@code{.end} block.
 
 The @var{which} argument should be either @code{no}, indicating that
diff --git a/gas/doc/c-arc.texi b/gas/doc/c-arc.texi
index aa095af..38bd3c8 100644
--- a/gas/doc/c-arc.texi
+++ b/gas/doc/c-arc.texi
@@ -151,10 +151,10 @@ using this directive.  The first parameter is the @var{name} of the
 new auxiallry register.  The second parameter is the @var{address} of
 the register in the auxiliary register memory map for the variant of
 the ARC.  The third parameter specifies the @var{mode} in which the
-register can be operated is and it can be one of: 
+register can be operated is and it can be one of:
 
 @table @code
-@item r          (readonly) 
+@item r          (readonly)
 @item w          (write only)
 @item r|w        (read or write)
 @end table
@@ -178,7 +178,7 @@ specify extra condition codes with any values.  For example:
 
 @smallexample
   .extCondCode is_busy,0x14
-  
+
    add.is_busy  r1,r2,r3
    bis_busy     _main
 @end smallexample
@@ -187,10 +187,10 @@ specify extra condition codes with any values.  For example:
 @item .extCoreRegister @var{name},@var{regnum},@var{mode},@var{shortcut}
 Specifies an extension core register @var{name} for the application.
 This allows a register @var{name} with a valid @var{regnum} between 0
-and 60, with the following as valid values for @var{mode} 
+and 60, with the following as valid values for @var{mode}
 
 @table @samp
-@item @emph{r}   (readonly) 
+@item @emph{r}   (readonly)
 @item @emph{w}   (write only)
 @item @emph{r|w} (read or write)
 @end table
@@ -220,9 +220,9 @@ The extension instructions are not macros.  The assembler creates
 encodings for use of these instructions according to the specification
 by the user.  The parameters are:
 
-@table @code
+@itemize @bullet
 @item @var{name}
-Name of the extension instruction 
+Name of the extension instruction
 
 @item @var{opcode}
 Opcode to be used. (Bits 27:31 in the encoding).  Valid values
@@ -234,7 +234,7 @@ correct value also depends on @var{syntaxclass}
 
 @item @var{suffixclass}
 Determines the kinds of suffixes to be allowed.  Valid values are
-@code{SUFFIX_NONE}, @code{SUFFIX_COND}, 
+@code{SUFFIX_NONE}, @code{SUFFIX_COND},
 @code{SUFFIX_FLAG} which indicates the absence or presence of
 conditional suffixes and flag setting by the extension instruction.
 It is also possible to specify that an instruction sets the flags and
@@ -246,9 +246,9 @@ following values:
 
 @table @code
 @item @code{SYNTAX_2OP}:
-2 Operand Instruction 
+2 Operand Instruction
 @item @code{SYNTAX_3OP}:
-3 Operand Instruction 
+3 Operand Instruction
 @end table
 
 In addition there could be modifiers for the syntax class as described
@@ -262,7 +262,7 @@ Modifies syntax class SYNTAX_3OP,  specifying that the first operand
 of a three-operand instruction must be an immediate (i.e., the result
 is discarded).  OP1_MUST_BE_IMM is used by bitwise ORing it with
 SYNTAX_3OP as given in the example below.  This could usually be used
-to set the flags using specific instructions and not retain results. 
+to set the flags using specific instructions and not retain results.
 
 @item @code{OP1_IMM_IMPLIED}:
 Modifies syntax class SYNTAX_20P, it specifies that there is an
@@ -270,7 +270,7 @@ implied immediate destination operand which does not appear in the
 syntax.  For example, if the source code contains an instruction like:
 
 @smallexample
-inst r1,r2 
+inst r1,r2
 @end smallexample
 
 it really means that the first argument is an implied immediate (that
@@ -278,8 +278,8 @@ is, the result is discarded).  This is the same as though the source
 code were: inst 0,r1,r2.  You use OP1_IMM_IMPLIED by bitwise ORing it
 with SYNTAX_20P.
 
-@end itemize 
-@end table
+@end itemize
+@end itemize
 
 For example, defining 64-bit multiplier with immediate operands:
 
@@ -290,7 +290,7 @@ For example, defining 64-bit multiplier with immediate operands:
 
 The above specifies an extension instruction called mp64 which has 3 operands,
 sets the flags, can be used with a condition code, for which the
-first operand is an immediate.  (Equivalent to discarding the result 
+first operand is an immediate.  (Equivalent to discarding the result
 of the operation).
 
 @smallexample
diff --git a/gas/doc/c-arm.texi b/gas/doc/c-arm.texi
index 8fb2fd4..37756a0 100644
--- a/gas/doc/c-arm.texi
+++ b/gas/doc/c-arm.texi
@@ -37,7 +37,7 @@
 This option specifies the target processor.  The assembler will issue an
 error message if an attempt is made to assemble an instruction which
 will not execute on the target processor.  The following processor names are
-recognized: 
+recognized:
 @code{arm1},
 @code{arm2},
 @code{arm250},
@@ -121,45 +121,51 @@ recognized:
 @code{cortex-a15},
 @code{cortex-r4},
 @code{cortex-r4f},
+@code{cortex-r5},
+@code{cortex-r7},
 @code{cortex-m4},
 @code{cortex-m3},
 @code{cortex-m1},
 @code{cortex-m0},
+@code{cortex-m0plus},
 @code{ep9312} (ARM920 with Cirrus Maverick coprocessor),
 @code{i80200} (Intel XScale processor)
 @code{iwmmxt} (Intel(r) XScale processor with Wireless MMX(tm) technology coprocessor)
 and
-@code{xscale}.  
+@code{xscale}.
 The special name @code{all} may be used to allow the
 assembler to accept instructions valid for any ARM processor.
 
-In addition to the basic instruction set, the assembler can be told to 
-accept various extension mnemonics that extend the processor using the 
+In addition to the basic instruction set, the assembler can be told to
+accept various extension mnemonics that extend the processor using the
 co-processor instruction space.  For example, @code{-mcpu=arm920+maverick}
-is equivalent to specifying @code{-mcpu=ep9312}.  
+is equivalent to specifying @code{-mcpu=ep9312}.
 
-Multiple extensions may be specified, separated by a @code{+}.  The 
+Multiple extensions may be specified, separated by a @code{+}.  The
 extensions should be specified in ascending alphabetical order.
 
-Some extensions may be restricted to particular architectures; this is 
+Some extensions may be restricted to particular architectures; this is
 documented in the list of extensions below.
 
-Extension mnemonics may also be removed from those the assembler accepts.  
-This is done be prepending @code{no} to the option that adds the extension.  
-Extensions that are removed should be listed after all extensions which have 
-been added, again in ascending alphabetical order.  For example, 
+Extension mnemonics may also be removed from those the assembler accepts.
+This is done be prepending @code{no} to the option that adds the extension.
+Extensions that are removed should be listed after all extensions which have
+been added, again in ascending alphabetical order.  For example,
 @code{-mcpu=ep9312+nomaverick} is equivalent to specifying @code{-mcpu=arm920}.
 
 
 The following extensions are currently supported:
-@code{idiv}, (Integer Divide Extensions for v7-A and v7-R architectures),
+@code{crypto} (Cryptography Extensions for v8-A architecture, implies @code{fp+simd}),
+@code{fp} (Floating Point Extensions for v8-A architecture),
+@code{idiv} (Integer Divide Extensions for v7-A and v7-R architectures),
 @code{iwmmxt},
 @code{iwmmxt2},
 @code{maverick},
 @code{mp} (Multiprocessing Extensions for v7-A and v7-R architectures),
 @code{os} (Operating System for v6M architecture),
 @code{sec} (Security Extensions for v6K and v7-A architectures),
-@code{virt} (Virtualization Extensions for v7-A architecture, implies 
+@code{simd} (Advanced SIMD Extensions for v8-A architecture, implies @code{fp}),
+@code{virt} (Virtualization Extensions for v7-A architecture, implies
 @code{idiv}),
 and
 @code{xscale}.
@@ -168,8 +174,8 @@ and
 @item -march=@var{architecture}[+@var{extension}@dots{}]
 This option specifies the target architecture.  The assembler will issue
 an error message if an attempt is made to assemble an instruction which
-will not execute on the target architecture.  The following architecture 
-names are recognized: 
+will not execute on the target architecture.  The following architecture
+names are recognized:
 @code{armv1},
 @code{armv2},
 @code{armv2a},
@@ -197,6 +203,7 @@ names are recognized:
 @code{armv7-r},
 @code{armv7-m},
 @code{armv7e-m},
+@code{armv8-a},
 @code{iwmmxt}
 and
 @code{xscale}.
@@ -212,7 +219,7 @@ extension options as the @code{-mcpu} option.
 
 This option specifies the floating point format to assemble for.  The
 assembler will issue an error message if an attempt is made to assemble
-an instruction which will not execute on the target floating point unit.  
+an instruction which will not execute on the target floating point unit.
 The following format options are recognized:
 @code{softfpa},
 @code{fpe},
@@ -239,26 +246,29 @@ The following format options are recognized:
 @code{vfpv4},
 @code{vfpv4-d16},
 @code{fpv4-sp-d16},
+@code{fp-armv8},
 @code{arm1020t},
 @code{arm1020e},
 @code{arm1136jf-s},
 @code{maverick},
 @code{neon},
+@code{neon-vfpv4},
+@code{neon-fp-armv8},
 and
-@code{neon-vfpv4}.
+@code{crypto-neon-fp-armv8}.
 
 In addition to determining which instructions are assembled, this option
 also affects the way in which the @code{.double} assembler directive behaves
 when assembling little-endian code.
 
-The default is dependent on the processor selected.  For Architecture 5 or 
-later, the default is to assembler for VFP instructions; for earlier 
+The default is dependent on the processor selected.  For Architecture 5 or
+later, the default is to assembler for VFP instructions; for earlier
 architectures the default is to assemble for FPA instructions.
 
 @cindex @code{-mthumb} command line option, ARM
 @item -mthumb
 This option specifies that the assembler should start assembling Thumb
-instructions; that is, it should behave as though the file starts with a 
+instructions; that is, it should behave as though the file starts with a
 @code{.code 16} directive.
 
 @cindex @code{-mthumb-interwork} command line option, ARM
@@ -294,7 +304,7 @@ Calling Standard.
 
 @cindex @code{-matpcs} command line option, ARM
 @item -matpcs
-This option specifies that the output generated by the assembler should 
+This option specifies that the output generated by the assembler should
 be marked as supporting the Arm/Thumb Procedure Calling Standard.  If
 enabled this option will cause the assembler to create an empty
 debugging section in the object file called .arm.atpcs.  Debuggers can
@@ -379,32 +389,32 @@ ARM and THUMB instructions had their own, separate syntaxes.  The new,
 @code{unified} syntax, which can be selected via the @code{.syntax}
 directive, and has the following main features:
 
-@table @code
-@item 1
+@itemize @bullet
+@item
 Immediate operands do not require a @code{#} prefix.
 
-@item 2
+@item
 The @code{IT} instruction may appear, and if it does it is validated
 against subsequent conditional affixes.  In ARM mode it does not
 generate machine code, in THUMB mode it does.
 
-@item 3
+@item
 For ARM instructions the conditional affixes always appear at the end
 of the instruction.  For THUMB instructions conditional affixes can be
 used, but only inside the scope of an @code{IT} instruction.
 
-@item 4
+@item
 All of the instructions new to the V6T2 architecture (and later) are
 available.  (Only a few such instructions can be written in the
 @code{divided} syntax).
 
-@item 5
+@item
 The @code{.N} and @code{.W} suffixes are recognized and honored.
 
-@item 6
+@item
 All instructions set the flags if and only if they have an @code{s}
 affix.
-@end table
+@end itemize
 
 @node ARM-Chars
 @subsection Special Characters
@@ -471,8 +481,10 @@ and
 @code{TPOFF}.
 
 For compatibility with older toolchains the assembler also accepts
-@code{(PLT)} after branch targets.  This will generate the deprecated
-@samp{R_ARM_PLT32} relocation.
+@code{(PLT)} after branch targets.  On legacy targets this will
+generate the deprecated @samp{R_ARM_PLT32} relocation.  On EABI
+targets it will encode either the @samp{R_ARM_CALL} or
+@samp{R_ARM_JUMP24} relocation, as appropriate.
 
 @cindex MOVW and MOVT relocations, ARM
 Relocations for @samp{MOVW} and @samp{MOVT} instructions can be generated
@@ -535,13 +547,13 @@ boundary).  This is for compatibility with ARM's own assembler.
 Select the target architecture.  Valid values for @var{name} are the same as
 for the @option{-march} commandline option.
 
-Specifying @code{.arch} clears any previously selected architecture 
+Specifying @code{.arch} clears any previously selected architecture
 extensions.
 
 @cindex @code{.arch_extension} directive, ARM
 @item .arch_extension @var{name}
-Add or remove an architecture extension to the target architecture.  Valid 
-values for @var{name} are the same as those accepted as architectural 
+Add or remove an architecture extension to the target architecture.  Valid
+values for @var{name} are the same as those accepted as architectural
 extensions by the @option{-mcpu} commandline option.
 
 @code{.arch_extension} may be used multiple times to add or remove extensions
@@ -581,7 +593,7 @@ selects Thumb, with the value 32 selecting ARM.
 Select the target processor.  Valid values for @var{name} are the same as
 for the @option{-mcpu} commandline option.
 
-Specifying @code{.cpu} clears any previously selected architecture 
+Specifying @code{.cpu} clears any previously selected architecture
 extensions.
 
 @c DDDDDDDDDDDDDDDDDDDDDDDDDD
@@ -647,7 +659,7 @@ The @var{value} is either a @code{number}, @code{"string"}, or
 @code{number, "string"} depending on the tag.
 
 Note - the following legacy values are also accepted by @var{tag}:
-@code{Tag_VFP_arch}, @code{Tag_ABI_align8_needed}, 
+@code{Tag_VFP_arch}, @code{Tag_ABI_align8_needed},
 @code{Tag_ABI_align8_preserved}, @code{Tag_VFP_HP_extension},
 
 @cindex @code{.even} directive, ARM
@@ -939,7 +951,7 @@ used in favour of @code{.save} for saving VFP registers for ARMv6 and above.
 @cindex opcodes for ARM
 @code{@value{AS}} implements all the standard ARM opcodes.  It also
 implements several pseudo opcodes, including several synthetic load
-instructions. 
+instructions.
 
 @table @code
 
@@ -953,7 +965,7 @@ This pseudo op will always evaluate to a legal ARM instruction that does
 nothing.  Currently it will evaluate to MOV r0, r0.
 
 @cindex @code{LDR reg,=<label>} pseudo op, ARM
-@item LDR 
+@item LDR
 @smallexample
   ldr <register> , = <expression>
 @end smallexample
@@ -978,7 +990,7 @@ the ADR instruction, then an error will be generated.  This instruction
 will not make use of the literal pool.
 
 @cindex @code{ADRL reg,<label>} pseudo op, ARM
-@item ADRL 
+@item ADRL
 @smallexample
   adrl <register> <label>
 @end smallexample
@@ -1054,12 +1066,12 @@ that G++ generates for the following C++ input:
 @verbatim
 void callee (int *);
 
-int 
-caller () 
+int
+caller ()
 {
   int i;
   callee (&i);
-  return i; 
+  return i;
 }
 @end verbatim
 
@@ -1116,7 +1128,7 @@ The @code{.fnstart} (@pxref{arm_fnstart,,.fnstart pseudo op}) pseudo
 op appears immediately before the first instruction of the function
 while the @code{.fnend} (@pxref{arm_fnend,,.fnend pseudo op}) pseudo
 op appears immediately after the last instruction of the function.
-These pseudo ops specify the range of the function.  
+These pseudo ops specify the range of the function.
 
 Only the order of the other pseudos ops (e.g., @code{.setfp} or
 @code{.pad}) matters; their exact locations are irrelevant.  In the
diff --git a/gas/doc/c-avr.texi b/gas/doc/c-avr.texi
index 83a96b0..8ef9aac 100644
--- a/gas/doc/c-avr.texi
+++ b/gas/doc/c-avr.texi
@@ -1,5 +1,4 @@
-@c Copyright 2006, 2007, 2008, 2009, 2011
-@c Free Software Foundation, Inc.
+@c Copyright 2006-2013 Free Software Foundation, Inc.
 @c This is part of the GAS manual.
 @c For copying conditions, see the file as.texinfo.
 
@@ -64,27 +63,32 @@ atmega88a, atmega88p, atmega88pa, atmega8515, atmega8535, atmega8hva, at90pwm1,
 at90pwm2, at90pwm2b, at90pwm3, at90pwm3b, at90pwm81).
 
 Instruction set avr5 is for the enhanced AVR core with up to 128K program
-memory space (MCU types: atmega16, atmega16a, atmega161, atmega162, atmega163,
-atmega164a, atmega164p, atmega165, atmega165a, atmega165p, atmega168,
-atmega168a, atmega168p, atmega169, atmega169a, atmega169p, atmega169pa,
-atmega32, atmega323, atmega324a, atmega324p, atmega325, atmega325a, atmega325p,
-atmega325pa, atmega3250, atmega3250a, atmega3250p, atmega3250pa, atmega328,
-atmega328p, atmega329, atmega329a, atmega329p, atmega329pa, atmega3290,
-atmega3290a, atmega3290p, atmega3290pa, atmega406, atmega64, atmega640,
-atmega644, atmega644a, atmega644p, atmega644pa, atmega645, atmega645a,
-atmega645p, atmega6450, atmega6450a, atmega6450p, atmega649, atmega649a,
-atmega649p, atmega6490, atmega6490a, atmega6490p, atmega16hva, atmega16hva2,
-atmega16hvb, atmega16hvbrevb, atmega32hvb, atmega32hvbrevb, atmega64hve,
-at90can32, at90can64, at90pwm161, at90pwm216, at90pwm316, atmega32c1,
-atmega64c1, atmega16m1, atmega32m1, atmega64m1, atmega16u4, atmega32u4,
+memory space (MCU types: atmega16, atmega16a, atmega161, atmega162,
+atmega163, atmega164a, atmega164p, atmega165, atmega165a, atmega165p,
+atmega168, atmega168a, atmega168p, atmega169, atmega169a, atmega169p,
+atmega169pa, atmega32, atmega323, atmega324a, atmega324p, atmega325,
+atmega325a, atmega325p, atmega325pa, atmega3250, atmega3250a,
+atmega3250p, atmega3250pa, atmega328, atmega328p, atmega329,
+atmega329a, atmega329p, atmega329pa, atmega3290, atmega3290a,
+atmega3290p, atmega3290pa, atmega406, atmega64, atmega640, atmega644,
+atmega644a, atmega644p, atmega644pa, atmega645, atmega645a,
+atmega645p, atmega6450, atmega6450a, atmega6450p, atmega649,
+atmega649a, atmega649p, atmega6490, atmega6490a, atmega6490p,
+atmega64rfr2, atmega644rfr2, atmega16hva, atmega16hva2, atmega16hvb,
+atmega16hvbrevb, atmega32hvb, atmega32hvbrevb, atmega64hve, at90can32,
+at90can64, at90pwm161, at90pwm216, at90pwm316, atmega32c1, atmega64c1,
+atmega16m1, atmega32m1, atmega64m1, atmega16u4, atmega32u4,
 atmega32u6, at90usb646, at90usb647, at94k, at90scr100).
 
 Instruction set avr51 is for the enhanced AVR core with exactly 128K program
 memory space (MCU types: atmega128, atmega1280, atmega1281, atmega1284p,
-atmega128rfa1, at90can128, at90usb1286, at90usb1287, m3000).
+atmega128rfa1,
+atmega128rfr2, atmega1284rfr2,
+at90can128, at90usb1286, at90usb1287, m3000).
 
 Instruction set avr6 is for the enhanced AVR core with a 3-byte PC (MCU types:
-atmega2560, atmega2561).
+atmega2560, atmega2561,
+atmega256rfr2, atmega2564rfr2).
 
 Instruction set avrxmega2 is for the XMEGA AVR core with 8K to 64K program
 memory space and less than 64K data space (MCU types: atxmega16a4, atxmega16d4,
@@ -96,13 +100,13 @@ memory space and greater than 64K data space (MCU types: none).
 Instruction set avrxmega4 is for the XMEGA AVR core with up to 64K program
 memory space and less than 64K data space (MCU types: atxmega64a3, atxmega64d3).
 
-Instruction set avrxmega5 is for the XMEGA AVR core with up to 64K program 
+Instruction set avrxmega5 is for the XMEGA AVR core with up to 64K program
 memory space and greater than 64K data space (MCU types: atxmega64a1,
 atxmega64a1u).
 
 Instruction set avrxmega6 is for the XMEGA AVR core with up to 256K program
 memory space and less than 64K data space (MCU types: atxmega128a3,
-atxmega128d3, atxmega192a3, atxmega128b1, atxmega192d3, atxmega256a3, 
+atxmega128d3, atxmega192a3, atxmega128b1, atxmega192d3, atxmega256a3,
 atxmega256a3b, atxmega256a3bu, atxmega192d3).
 
 Instruction set avrxmega7 is for the XMEGA AVR core with up to 256K program
@@ -294,37 +298,37 @@ The following table summarizes the AVR opcodes, and their arguments.
    S   @r{immediate value from 0 to 7 (S = s << 4)}
    ?   @r{use this opcode entry if no parameters, else use next opcode entry}
 
-1001010010001000   clc  
-1001010011011000   clh  
-1001010011111000   cli  
-1001010010101000   cln  
-1001010011001000   cls  
-1001010011101000   clt  
-1001010010111000   clv  
-1001010010011000   clz  
-1001010000001000   sec  
-1001010001011000   seh  
-1001010001111000   sei  
-1001010000101000   sen  
-1001010001001000   ses  
-1001010001101000   set  
-1001010000111000   sev  
-1001010000011000   sez  
+1001010010001000   clc
+1001010011011000   clh
+1001010011111000   cli
+1001010010101000   cln
+1001010011001000   cls
+1001010011101000   clt
+1001010010111000   clv
+1001010010011000   clz
+1001010000001000   sec
+1001010001011000   seh
+1001010001111000   sei
+1001010000101000   sen
+1001010001001000   ses
+1001010001101000   set
+1001010000111000   sev
+1001010000011000   sez
 100101001SSS1000   bclr    S
 100101000SSS1000   bset    S
 1001010100001001   icall
-1001010000001001   ijmp 
+1001010000001001   ijmp
 1001010111001000   lpm     ?
 1001000ddddd010+   lpm     r,z
 1001010111011000   elpm    ?
 1001000ddddd011+   elpm    r,z
-0000000000000000   nop  
-1001010100001000   ret  
-1001010100011000   reti 
+0000000000000000   nop
+1001010100001000   ret
+1001010100011000   reti
 1001010110001000   sleep
 1001010110011000   break
-1001010110101000   wdr  
-1001010111101000   spm  
+1001010110101000   wdr
+1001010111101000   spm
 000111rdddddrrrr   adc     r,r
 000011rdddddrrrr   add     r,r
 001000rdddddrrrr   and     r,r
@@ -408,6 +412,6 @@ The following table summarizes the AVR opcodes, and their arguments.
 100!000dddddee-+   ld      r,e
 10o0oo1rrrrrbooo   std     b,r
 100!001rrrrree-+   st      e,r
-1001010100011001   eicall  
-1001010000011001   eijmp   
+1001010100011001   eicall
+1001010000011001   eijmp
 @end smallexample
diff --git a/gas/doc/c-bfin.texi b/gas/doc/c-bfin.texi
index 31273e6..870e0db 100644
--- a/gas/doc/c-bfin.texi
+++ b/gas/doc/c-bfin.texi
@@ -37,7 +37,7 @@ is not used in assembler.  It's here such that GCC can easily pass down its
 @code{-mcpu=} option.  The assembler will issue an
 error message if an attempt is made to assemble an instruction which
 will not execute on the target processor.  The following processor names are
-recognized: 
+recognized:
 @code{bf504},
 @code{bf506},
 @code{bf512},
@@ -97,7 +97,7 @@ One instruction may extend across multiple lines or more than one
 instruction may appear on the same line.  White space (space, tab,
 comments or newline) may appear anywhere between tokens.  A token must
 not have embedded spaces.  Tokens include numbers, register names,
-keywords, user identifiers, and also some multicharacter special 
+keywords, user identifiers, and also some multicharacter special
 symbols like "+=", "/*" or "||".
 
 Comments are introduced by the @samp{#} character and extend to the
@@ -109,7 +109,7 @@ this case the line can also be a logical line number directive
 
 @item Instruction Delimiting
 A semicolon must terminate every instruction.  Sometimes a complete
-instruction will consist of more than one operation.  There are two 
+instruction will consist of more than one operation.  There are two
 cases where this occurs.  The first is when two general operations
 are combined.  Normally a comma separates the different parts, as in
 
@@ -136,9 +136,9 @@ R3.L, r3.l and r3.L are all equivalent input to the assembler.
 
 Register names are reserved and may not be used as program identifiers.
 
-Some operations (such as "Move Register") require a register pair. 
+Some operations (such as "Move Register") require a register pair.
 Register pairs are always data registers and are denoted using a colon,
-eg., R3:2.  The larger number must be written firsts.  Note that the 
+eg., R3:2.  The larger number must be written firsts.  Note that the
 hardware only supports odd-even pairs, eg., R7:6, R5:4, R3:2, and R1:0.
 
 Some instructions (such as --SP (Push Multiple)) require a group of
@@ -147,7 +147,7 @@ the range enclosed in parentheses and separated by a colon, eg., (R7:3).
 Again, the larger number appears first.
 
 Portions of a particular register may be individually specified.  This
-is written with a dot (".") following the register name and then a 
+is written with a dot (".") following the register name and then a
 letter denoting the desired portion.  For 32-bit registers, ".H"
 denotes the most significant ("High") portion.  ".L" denotes the
 least-significant portion.  The subdivisions of the 40-bit registers
@@ -171,7 +171,7 @@ extend beyond bit 31.
 
 @item Data Registers
 The set of 32-bit registers (R0, R1, R2, R3, R4, R5, R6 and R7) that
-normally contain data for manipulation.  These are abbreviated as 
+normally contain data for manipulation.  These are abbreviated as
 D-register or Dreg.  Data registers can be accessed as 32-bit registers
 or as two independent 16-bit registers.  The least significant 16 bits
 of each register is called the "low" half and is designated with ".L"
diff --git a/gas/doc/c-cr16.texi b/gas/doc/c-cr16.texi
index d918e6b..b996d73 100644
--- a/gas/doc/c-cr16.texi
+++ b/gas/doc/c-cr16.texi
@@ -22,48 +22,55 @@
 @section CR16 Operand Qualifiers
 @cindex CR16 Operand Qualifiers
 
-The National Semiconductor CR16 target of @code{@value{AS}} has a few machine dependent operand qualifiers.  
+The National Semiconductor CR16 target of @code{@value{AS}} has a few machine dependent operand qualifiers.
 
 Operand expression type qualifier is an optional field in the instruction operand, to determines the type of the expression field of an operand. The @code{@@} is required. CR16 architecture uses one of the following expression qualifiers:
 
 @table @code
-@item  s 
+@item  s
 - @code{Specifies expression operand type as small}
-@item  m 
+@item  m
 - @code{Specifies expression operand type as medium}
-@item  l 
+@item  l
 - @code{Specifies expression operand type as large}
-@item  c 
+@item  c
 - @code{Specifies the CR16 Assembler generates a relocation entry for the operand, where pc has implied bit, the expression is adjusted accordingly. The linker uses the relocation entry to update the operand address at link time.}
-@item  got/GOT 
+@item  got/GOT
 - @code{Specifies the CR16 Assembler generates a relocation entry for the operand, offset from Global Offset Table. The linker uses this relocation entry to update the operand address at link time}
-@item  cgot/cGOT 
+@item  cgot/cGOT
 - @code{Specifies the CompactRISC Assembler generates a relocation entry for the operand, where pc has implied bit, the expression is adjusted accordingly. The linker uses the relocation entry to update the operand address at link time.}
 @end table
 
 CR16 target operand qualifiers and its size (in bits):
 
 @table @samp
-@item Immediate Operand
-- s ---- 4 bits
-@item 
-- m ---- 16 bits, for movb and movw instructions.
-@item 
-- m ---- 20 bits, movd instructions.
-@item 
-- l ---- 32 bits
-
-@item Absolute Operand
-- s ---- Illegal specifier for this operand.
-@item  
-- m ---- 20 bits, movd instructions.
-
-@item Displacement Operand
-- s ---- 8 bits
-@item
-- m ---- 16 bits
-@item 
-- l ---- 24 bits
+@item Immediate Operand: s
+4 bits.
+
+@item Immediate Operand: m
+16 bits, for movb and movw instructions.
+
+@item Immediate Operand: m
+20 bits, movd instructions.
+
+@item Immediate Operand: l
+32 bits.
+
+@item Absolute Operand: s
+Illegal specifier for this operand.
+
+@item Absolute Operand: m
+20 bits, movd instructions.
+
+@item Displacement Operand: s
+8 bits.
+
+@item Displacement Operand: m
+16 bits.
+
+@item Displacement Operand: l
+24 bits.
+
 @end table
 
 For example:
@@ -75,7 +82,7 @@ For example:
 2   @code{movd $_myfun@@c,(r2,r1)}
 
     This loads the address of _myfun, shifted right by 1, into register-pair r2-r1.
-                
+
 3   @code{_myfun_ptr:}
     @code{.long _myfun@@c}
     @code{loadd _myfun_ptr, (r1,r0)}
@@ -89,7 +96,7 @@ For example:
 
 5   @code{loadd  _myfunc@@cGOT(r12), (r1,r0)}
 
-    This loads the address of _myfun, shifted right by 1, into global offset table (ie GOT) and its offset value from GOT loads into register-pair r1-r0.	
+    This loads the address of _myfun, shifted right by 1, into global offset table (ie GOT) and its offset value from GOT loads into register-pair r1-r0.
 @end example
 
 @node CR16 Syntax
diff --git a/gas/doc/c-d10v.texi b/gas/doc/c-d10v.texi
index 311277e..d6c0bb6 100644
--- a/gas/doc/c-d10v.texi
+++ b/gas/doc/c-d10v.texi
@@ -33,7 +33,7 @@ is used, @code{@value{AS}} will attempt to optimize its output by detecting when
 instructions can be executed in parallel.
 @item --nowarnswap
 To optimize execution performance, @code{@value{AS}} will sometimes swap the
-order of instructions. Normally this generates a warning. When this option 
+order of instructions. Normally this generates a warning. When this option
 is used, no warning will be generated when instructions are swapped.
 @item --gstabs-packing
 @itemx --no-gstabs-packing
@@ -71,11 +71,11 @@ Architecture Manual.  However, the names in the manual are sometimes ambiguous.
 There are instruction names that can assemble to a short or long form opcode.
 How does the assembler pick the correct form?  @code{@value{AS}} will always pick the
 smallest form if it can.  When dealing with a symbol that is not defined yet when a
-line is being assembled, it will always use the long form.  If you need to force the 
+line is being assembled, it will always use the long form.  If you need to force the
 assembler to use either the short or long form of the instruction, you can append
-either @samp{.s} (short) or @samp{.l} (long) to it.  For example, if you are writing 
+either @samp{.s} (short) or @samp{.l} (long) to it.  For example, if you are writing
 an assembly program and you want to do a branch to a symbol that is defined later
-in your program, you can write @samp{bra.s   foo}.  
+in your program, you can write @samp{bra.s   foo}.
 Objdump and GDB will always append @samp{.s} or @samp{.l} to instructions which
 have both short and long forms.
 
@@ -93,8 +93,8 @@ instruction is called, it will not be packaged with the next instruction so the
 address will be valid.  Nops are automatically inserted when necessary.
 
 If you do not want the assembler automatically making these decisions, you can control
-the packaging and execution type (parallel or sequential) with the special execution 
-symbols described in the next section.  
+the packaging and execution type (parallel or sequential) with the special execution
+symbols described in the next section.
 
 @node D10V-Chars
 @subsection Special Characters
@@ -112,7 +112,7 @@ control command (@pxref{Preprocessing}).
 @cindex D10V sub-instruction ordering
 Sub-instructions may be executed in order, in reverse-order, or in parallel.
 Instructions listed in the standard one-per-line format will be executed sequentially.
-To specify the executing order, use the following symbols: 
+To specify the executing order, use the following symbols:
 @table @samp
 @item ->
 Sequential with instruction on the left first.
@@ -132,17 +132,17 @@ Execute these reverse-sequentially.  The instruction on the right is in the righ
 container, and is executed first.
 @item ld2w    r2,@@r8+         ||      mac     a0,r0,r7
 Execute these in parallel.
-@item ld2w    r2,@@r8+         ||      
+@item ld2w    r2,@@r8+         ||
 @itemx mac     a0,r0,r7
 Two-line format. Execute these in parallel.
-@item ld2w    r2,@@r8+         
+@item ld2w    r2,@@r8+
 @itemx mac     a0,r0,r7
 Two-line format. Execute these sequentially.  Assembler will
 put them in the proper containers.
 @item ld2w    r2,@@r8+         ->
 @itemx mac     a0,r0,r7
 Two-line format. Execute these sequentially.  Same as above but
-second instruction will always go into right container.  
+second instruction will always go into right container.
 @end table
 @cindex symbol names, @samp{$} in
 @cindex @code{$} in symbol names
@@ -152,11 +152,11 @@ Since @samp{$} has no special meaning, you may use it in symbol names.
 @subsection Register Names
 @cindex D10V registers
 @cindex registers, D10V
-You can use the predefined symbols @samp{r0} through @samp{r15} to refer to the D10V 
+You can use the predefined symbols @samp{r0} through @samp{r15} to refer to the D10V
 registers.  You can also use @samp{sp} as an alias for @samp{r15}.  The accumulators
-are @samp{a0} and @samp{a1}.  There are special register-pair names that may 
-optionally be used in opcodes that require even-numbered registers. Register names are 
-not case sensitive.  
+are @samp{a0} and @samp{a1}.  There are special register-pair names that may
+optionally be used in opcodes that require even-numbered registers. Register names are
+not case sensitive.
 
 Register Pairs
 @table @code
@@ -199,7 +199,7 @@ Flag 1
 @item c
 Carry flag
 @end table
-        
+
 @node D10V-Addressing
 @subsection Addressing Modes
 @cindex addressing modes, D10V
@@ -221,7 +221,7 @@ Register indirect with pre-decrement
 @item @@(@var{disp}, R@var{n})
 Register indirect with displacement
 @item @var{addr}
-PC relative address (for branch or rep). 
+PC relative address (for branch or rep).
 @item #@var{imm}
 Immediate data (the @samp{#} is optional and ignored)
 @end table
@@ -248,7 +248,7 @@ jmp     r2
 @cindex D10V floating point
 The D10V has no hardware floating point, but the @code{.float} and @code{.double}
 directives generates @sc{ieee} floating-point numbers for compatibility
-with other development tools. 
+with other development tools.
 
 @node D10V-Opcodes
 @section Opcodes
@@ -257,7 +257,7 @@ with other development tools.
 @cindex mnemonics, D10V
 @cindex instruction summary, D10V
 For detailed information on the D10V machine instruction set, see
-@cite{D10V Architecture: A VLIW Microprocessor for Multimedia Applications} 
+@cite{D10V Architecture: A VLIW Microprocessor for Multimedia Applications}
 (Mitsubishi Electric Corp.).
 @code{@value{AS}} implements all the standard D10V opcodes.  The only changes are those
 described in the section on size modifiers
diff --git a/gas/doc/c-d30v.texi b/gas/doc/c-d30v.texi
index 420311f..aec7f68 100644
--- a/gas/doc/c-d30v.texi
+++ b/gas/doc/c-d30v.texi
@@ -69,11 +69,11 @@ Architecture Manual.  However, the names in the manual are sometimes ambiguous.
 There are instruction names that can assemble to a short or long form opcode.
 How does the assembler pick the correct form?  @code{@value{AS}} will always pick the
 smallest form if it can.  When dealing with a symbol that is not defined yet when a
-line is being assembled, it will always use the long form.  If you need to force the 
+line is being assembled, it will always use the long form.  If you need to force the
 assembler to use either the short or long form of the instruction, you can append
-either @samp{.s} (short) or @samp{.l} (long) to it.  For example, if you are writing 
+either @samp{.s} (short) or @samp{.l} (long) to it.  For example, if you are writing
 an assembly program and you want to do a branch to a symbol that is defined later
-in your program, you can write @samp{bra.s foo}. 
+in your program, you can write @samp{bra.s foo}.
 Objdump and GDB will always append @samp{.s} or @samp{.l} to instructions which
 have both short and long forms.
 
@@ -91,8 +91,8 @@ instruction is called, it will not be packaged with the next instruction so the
 address will be valid.  Nops are automatically inserted when necessary.
 
 If you do not want the assembler automatically making these decisions, you can control
-the packaging and execution type (parallel or sequential) with the special execution 
-symbols described in the next section.  
+the packaging and execution type (parallel or sequential) with the special execution
+symbols described in the next section.
 
 @node D30V-Chars
 @subsection Special Characters
@@ -112,7 +112,7 @@ Sub-instructions may be executed in order, in reverse-order, or in parallel.
 Instructions listed in the standard one-per-line format will be executed
 sequentially unless you use the @samp{-O} option.
 
-To specify the executing order, use the following symbols: 
+To specify the executing order, use the following symbols:
 @table @samp
 @item ->
 Sequential with instruction on the left first.
@@ -250,7 +250,7 @@ Same as flag 7 (carry/borrow flag)
 @item b
 Same as flag 7 (carry/borrow flag)
 @end table
-        
+
 @node D30V-Addressing
 @subsection Addressing Modes
 @cindex addressing modes, D30V
@@ -272,7 +272,7 @@ Register indirect with pre-decrement
 @item @@(@var{disp}, R@var{n})
 Register indirect with displacement
 @item @var{addr}
-PC relative address (for branch or rep). 
+PC relative address (for branch or rep).
 @item #@var{imm}
 Immediate data (the @samp{#} is optional and ignored)
 @end table
@@ -283,7 +283,7 @@ Immediate data (the @samp{#} is optional and ignored)
 @cindex D30V floating point
 The D30V has no hardware floating point, but the @code{.float} and @code{.double}
 directives generates @sc{ieee} floating-point numbers for compatibility
-with other development tools. 
+with other development tools.
 
 @node D30V-Opcodes
 @section Opcodes
@@ -292,7 +292,7 @@ with other development tools.
 @cindex mnemonics, D30V
 @cindex instruction summary, D30V
 For detailed information on the D30V machine instruction set, see
-@cite{D30V Architecture: A VLIW Microprocessor for Multimedia Applications} 
+@cite{D30V Architecture: A VLIW Microprocessor for Multimedia Applications}
 (Mitsubishi Electric Corp.).
 @code{@value{AS}} implements all the standard D30V opcodes.  The only changes are those
 described in the section on size modifiers
diff --git a/gas/doc/c-h8300.texi b/gas/doc/c-h8300.texi
index ef3bb6b..5245c66 100644
--- a/gas/doc/c-h8300.texi
+++ b/gas/doc/c-h8300.texi
@@ -25,11 +25,13 @@
 The Renesas H8/300 version of @code{@value{AS}} has one
 machine-dependent option:
 
-@table @code
+@c man begin OPTIONS
+@table @gcctabopt
 @item -h-tick-hex
 Support H'00 style hex constants in addition to 0x00 style.
 
 @end table
+@c man end
 
 @node H8/300 Syntax
 @section Syntax
@@ -158,12 +160,12 @@ for the H8/300 family.
 
 @item .h8300hn
 Recognize and emit additional instructions for the H8/300H variant in
-normal mode, and also make @code{.int} emit 32-bit numbers rather than 
+normal mode, and also make @code{.int} emit 32-bit numbers rather than
 the usual (16-bit) for the H8/300 family.
 
 @item .h8300sn
 Recognize and emit additional instructions for the H8S variant in
-normal mode, and also make @code{.int} emit 32-bit numbers rather than 
+normal mode, and also make @code{.int} emit 32-bit numbers rather than
 the usual (16-bit) for the H8/300 family.
 @end table
 
diff --git a/gas/doc/c-hppa.texi b/gas/doc/c-hppa.texi
index a349d28..2bb1ae4 100644
--- a/gas/doc/c-hppa.texi
+++ b/gas/doc/c-hppa.texi
@@ -25,12 +25,12 @@ compilers.
 
 The format of the debugging sections has changed since the original
 @code{@value{AS}} port (version 1.3X) was released; therefore,
-you must rebuild all HPPA objects and libraries with the new 
+you must rebuild all HPPA objects and libraries with the new
 assembler so that you can debug the final executable.
 
 The HPPA @code{@value{AS}} port generates a small subset of the relocations
 available in the SOM and ELF object file formats.  Additional relocation
-support will be added as it becomes necessary.  
+support will be added as it becomes necessary.
 
 @node HPPA Options
 @section Options
@@ -89,7 +89,7 @@ described in the HP manual:
 @example
 .endm           .liston
 .enter          .locct
-.leave          .macro  
+.leave          .macro
 .listoff
 @end example
 
@@ -107,7 +107,7 @@ These are the additional directives in @code{@value{AS}} for the HPPA:
 @itemx .blockz @var{n}
 Reserve @var{n} bytes of storage, and initialize them to zero.
 
-@item .call 
+@item .call
 Mark the beginning of a procedure call.  Only the special case with @emph{no
 arguments} is allowed.
 
@@ -297,5 +297,5 @@ Write @var{str} as version identifier in object code.
 @node HPPA Opcodes
 @section Opcodes
 For detailed information on the HPPA machine instruction set, see
-@cite{PA-RISC Architecture and Instruction Set Reference Manual} 
+@cite{PA-RISC Architecture and Instruction Set Reference Manual}
 (HP 09740-90039).
diff --git a/gas/doc/c-i370.texi b/gas/doc/c-i370.texi
index 401d07e..a580a7c 100644
--- a/gas/doc/c-i370.texi
+++ b/gas/doc/c-i370.texi
@@ -27,15 +27,15 @@
 @section Notes
 The ESA/390 @code{@value{AS}} port is currently intended to be a back-end
 for the @sc{gnu} @sc{cc} compiler.  It is not HLASM compatible, although
-it does support a subset of some of the HLASM directives.  The only 
-supported binary file format is ELF; none of the usual MVS/VM/OE/USS 
+it does support a subset of some of the HLASM directives.  The only
+supported binary file format is ELF; none of the usual MVS/VM/OE/USS
 object file formats, such as ESD or XSD, are supported.
 
 When used with the @sc{gnu} @sc{cc} compiler, the ESA/390 @code{@value{AS}}
-will produce correct, fully relocated, functional binaries, and has been 
-used to compile and execute large projects.  However, many aspects should 
-still be considered experimental; these include shared library support, 
-dynamically loadable objects, and any relocation other than the 31-bit 
+will produce correct, fully relocated, functional binaries, and has been
+used to compile and execute large projects.  However, many aspects should
+still be considered experimental; these include shared library support,
+dynamically loadable objects, and any relocation other than the 31-bit
 relocation.
 
 @node ESA/390 Options
@@ -46,9 +46,9 @@ relocation.
 @node ESA/390 Syntax
 @section Syntax
 The opcode/operand syntax follows the ESA/390 Principles of Operation
-manual; assembler directives and general syntax are loosely based on the 
+manual; assembler directives and general syntax are loosely based on the
 prevailing AT&T/SVR4/ELF/Solaris style notation.  HLASM-style directives
-are @emph{not} supported for the most part, with the exception of those 
+are @emph{not} supported for the most part, with the exception of those
 described herein.
 
 A leading dot in front of directives is optional, and the case of
@@ -66,20 +66,20 @@ write code.
 Since @samp{$} has no special meaning, you may use it in symbol names.
 
 Registers can be given the symbolic names r0..r15, fp0, fp2, fp4, fp6.
-By using thesse symbolic names, @code{@value{AS}} can detect simple 
+By using thesse symbolic names, @code{@value{AS}} can detect simple
 syntax errors. The name rarg or r.arg is a synonym for r11, rtca or r.tca
-for r12, sp, r.sp, dsa r.dsa for r13, lr or r.lr for r14, rbase or r.base 
+for r12, sp, r.sp, dsa r.dsa for r13, lr or r.lr for r14, rbase or r.base
 for r3 and rpgt or r.pgt for r4.
 
 @samp{*} is the current location counter.  Unlike @samp{.} it is always
-relative to the last USING directive.  Note that this means that 
+relative to the last USING directive.  Note that this means that
 expressions cannot use multiplication, as any occurrence of @samp{*}
 will be interpreted as a location counter.
 
-All labels are relative to the last USING.  Thus, branches to a label 
+All labels are relative to the last USING.  Thus, branches to a label
 always imply the use of base+displacement.
 
-Many of the usual forms of address constants / address literals 
+Many of the usual forms of address constants / address literals
 are supported.  Thus,
 @example
 	.using	*,r3
@@ -93,7 +93,7 @@ are supported.  Thus,
 	.ltorg
 @end example
 should all behave as expected: that is, an entry in the literal
-pool will be created (or reused if it already exists), and the 
+pool will be created (or reused if it already exists), and the
 instruction operands will be the displacement into the literal pool
 using the current base register (as last declared with the @code{.using}
 directive).
@@ -109,7 +109,7 @@ floating point formats are not supported.
 @node ESA/390 Directives
 @section ESA/390 Assembler Directives
 
-@code{@value{AS}} for the ESA/390 supports all of the standard ELF/SVR4 
+@code{@value{AS}} for the ESA/390 supports all of the standard ELF/SVR4
 assembler directives that are documented in the main part of this
 documentation.  Several additional directives are supported in order
 to implement the ESA/390 addressing model.  The most important of these
@@ -119,7 +119,7 @@ are @code{.using} and @code{.ltorg}
 These are the additional directives in @code{@value{AS}} for the ESA/390:
 
 @table @code
-@item .dc 
+@item .dc
 A small subset of the usual DC directive is supported.
 
 @item .drop @var{regno}
@@ -132,11 +132,11 @@ Emit the EBCDIC equivalent of the indicated string.  The emitted string
 will be null terminated.  Note that the directives @code{.string} etc. emit
 ascii strings by default.
 
-@item EQU 
-The standard HLASM-style EQU directive is not supported; however, the 
+@item EQU
+The standard HLASM-style EQU directive is not supported; however, the
 standard @code{@value{AS}} directive .equ can be used to the same effect.
 
-@item .ltorg 
+@item .ltorg
 Dump the literal pool accumulated so far; begin a new literal pool.
 The literal pool will be written in the current section; in order to
 generate correct assembly, a @code{.using} must have been previously
@@ -148,20 +148,20 @@ instructions. The @var{expr} will be evaluated to obtain the base address;
 usually, @var{expr} will merely be @samp{*}.
 
 This assembler allows two @code{.using} directives to be simultaneously
-outstanding, one in the @code{.text} section, and one in another section 
-(typically, the @code{.data} section).  This feature allows 
-dynamically loaded objects to be implemented in a relatively 
-straightforward way.  A @code{.using} directive must always be specified 
+outstanding, one in the @code{.text} section, and one in another section
+(typically, the @code{.data} section).  This feature allows
+dynamically loaded objects to be implemented in a relatively
+straightforward way.  A @code{.using} directive must always be specified
 in the @code{.text} section; this will specify the base register that
 will be used for branches in the @code{.text} section.  A second
 @code{.using} may be specified in another section; this will specify
 the base register that is used for non-label address literals.
 When a second @code{.using} is specified, then the subsequent
-@code{.ltorg} must be put in the same section; otherwise an error will 
+@code{.ltorg} must be put in the same section; otherwise an error will
 result.
 
-Thus, for example, the following code uses @code{r3} to address branch 
-targets and @code{r4} to address the literal pool, which has been written 
+Thus, for example, the following code uses @code{r3} to address branch
+targets and @code{r4} to address the literal pool, which has been written
 to the @code{.data} section.  The is, the constants @code{=A(some_routine)},
 @code{=H'42'} and @code{=E'3.1416'} will all appear in the @code{.data}
 section.
@@ -188,8 +188,8 @@ LITPOOL:
 @end example
 
 
-Note that this dual-@code{.using} directive semantics extends 
-and is not compatible with HLASM semantics.  Note that this assembler 
+Note that this dual-@code{.using} directive semantics extends
+and is not compatible with HLASM semantics.  Note that this assembler
 directive does not support the full range of HLASM semantics.
 
 @end table
diff --git a/gas/doc/c-i386.texi b/gas/doc/c-i386.texi
index 30745b4..9aae847 100644
--- a/gas/doc/c-i386.texi
+++ b/gas/doc/c-i386.texi
@@ -49,7 +49,7 @@ extending the Intel architecture to 64-bits.
 @cindex options for i386
 @cindex options for x86-64
 @cindex i386 options
-@cindex x86-64 options 
+@cindex x86-64 options
 
 The i386 version of @code{@value{AS}} has a few machine
 dependent options:
@@ -92,7 +92,7 @@ affect using @samp{#} for starting a comment.
 This option specifies the target processor.  The assembler will
 issue an error message if an attempt is made to assemble an instruction
 which will not execute on the target processor.  The following
-processor names are recognized: 
+processor names are recognized:
 @code{i8086},
 @code{i186},
 @code{i286},
@@ -120,10 +120,13 @@ processor names are recognized:
 @code{amdfam10},
 @code{bdver1},
 @code{bdver2},
+@code{bdver3},
+@code{btver1},
+@code{btver2},
 @code{generic32} and
 @code{generic64}.
 
-In addition to the basic instruction set, the assembler can be told to 
+In addition to the basic instruction set, the assembler can be told to
 accept various extension mnemonics.  For example,
 @code{-march=i686+sse4+vmx} extends @var{i686} with @var{sse4} and
 @var{vmx}.  The following extensions are currently supported:
@@ -143,8 +146,13 @@ accept various extension mnemonics.  For example,
 @code{nosse},
 @code{avx},
 @code{avx2},
+@code{adx},
+@code{rdseed},
+@code{prfchw},
+@code{smap},
 @code{noavx},
 @code{vmx},
+@code{vmfunc},
 @code{smx},
 @code{xsave},
 @code{xsaveopt},
@@ -158,11 +166,14 @@ accept various extension mnemonics.  For example,
 @code{movbe},
 @code{ept},
 @code{lzcnt},
+@code{hle},
+@code{rtm},
 @code{invpcid},
 @code{clflush},
 @code{lwp},
 @code{fma4},
 @code{xop},
+@code{cx16},
 @code{syscall},
 @code{rdtscp},
 @code{3dnow},
@@ -221,7 +232,7 @@ with 256bit vector length.
 @cindex @samp{-mmnemonic=} option, x86-64
 @item -mmnemonic=@var{att}
 @itemx -mmnemonic=@var{intel}
-This option specifies instruction mnemonic for matching instructions. 
+This option specifies instruction mnemonic for matching instructions.
 The @code{.att_mnemonic} and @code{.intel_mnemonic} directives will
 take precedent.
 
@@ -229,7 +240,7 @@ take precedent.
 @cindex @samp{-msyntax=} option, x86-64
 @item -msyntax=@var{att}
 @itemx -msyntax=@var{intel}
-This option specifies instruction syntax when processing instructions. 
+This option specifies instruction syntax when processing instructions.
 The @code{.att_syntax} and @code{.intel_syntax} directives will
 take precedent.
 
@@ -439,8 +450,8 @@ quadruple word).
 
 Different encoding options can be specified via optional mnemonic
 suffix.  @samp{.s} suffix swaps 2 register operands in encoding when
-moving from one register to another.  @samp{.d32} suffix forces 32bit
-displacement in encoding.
+moving from one register to another.  @samp{.d8} or @samp{.d32} suffix
+prefers 8bit or 32bit displacement in encoding.
 
 @cindex conversion instructions, i386
 @cindex i386 conversion instructions
@@ -893,7 +904,7 @@ For detailed information on the LWP instruction set, see the
 
 BMI instructions provide several instructions implementing individual
 bit manipulation operations such as isolation, masking, setting, or
-resetting.  
+resetting.
 
 @c Need to add a specification citation here when available.
 
@@ -1006,7 +1017,8 @@ supported on the CPU specified.  The choices for @var{cpu_type} are:
 @item @samp{prescott} @tab @samp{nocona} @tab @samp{core} @tab @samp{core2}
 @item @samp{corei7} @tab @samp{l1om} @tab @samp{k1om}
 @item @samp{k6} @tab @samp{k6_2} @tab @samp{athlon} @tab @samp{k8}
-@item @samp{amdfam10} @tab @samp{bdver1} @tab @samp{bdver2}
+@item @samp{amdfam10} @tab @samp{bdver1} @tab @samp{bdver2} @tab @samp{bdver3}
+@item @samp{btver1} @tab @samp{btver2}
 @item @samp{generic32} @tab @samp{generic64}
 @item @samp{.mmx} @tab @samp{.sse} @tab @samp{.sse2} @tab @samp{.sse3}
 @item @samp{.ssse3} @tab @samp{.sse4.1} @tab @samp{.sse4.2} @tab @samp{.sse4}
@@ -1014,10 +1026,12 @@ supported on the CPU specified.  The choices for @var{cpu_type} are:
 @item @samp{.clflush} @tab @samp{.movbe} @tab @samp{.xsave} @tab @samp{.xsaveopt}
 @item @samp{.aes} @tab @samp{.pclmul} @tab @samp{.fma} @tab @samp{.fsgsbase}
 @item @samp{.rdrnd} @tab @samp{.f16c} @tab @samp{.avx2} @tab @samp{.bmi2}
-@item @samp{.lzcnt} @tab @samp{.invpcid}
+@item @samp{.lzcnt} @tab @samp{.invpcid} @tab @samp{.vmfunc} @tab @samp{.hle}
+@item @samp{.rtm} @tab @samp{.adx} @tab @samp{.rdseed} @tab @samp{.prfchw}
+@item @samp{.smap}
 @item @samp{.3dnow} @tab @samp{.3dnowa} @tab @samp{.sse4a} @tab @samp{.sse5}
 @item @samp{.syscall} @tab @samp{.rdtscp} @tab @samp{.svme} @tab @samp{.abm}
-@item @samp{.lwp} @tab @samp{.fma4} @tab @samp{.xop}
+@item @samp{.lwp} @tab @samp{.fma4} @tab @samp{.xop} @tab @samp{.cx16}
 @item @samp{.padlock}
 @end multitable
 
diff --git a/gas/doc/c-i860.texi b/gas/doc/c-i860.texi
index c959450..a66024e 100644
--- a/gas/doc/c-i860.texi
+++ b/gas/doc/c-i860.texi
@@ -26,7 +26,7 @@ that I will add later (jle@cygnus.com).
 @end menu
 
 @node Notes-i860
-@section i860 Notes 
+@section i860 Notes
 This is a fairly complete i860 assembler which is compatible with the
 UNIX System V/860 Release 4 assembler. However, it does not currently
 support SVR4 PIC (i.e., @code{@@GOT, @@GOTOFF, @@PLT}).
@@ -43,7 +43,7 @@ is @code{ha%expression} whereas the SVR4 syntax is @code{[expression]@@ha}
 (and similarly for the "l" and "h" selectors).
 @node Options-i860
 @section i860 Command-line Options
-@subsection SVR4 compatibility options 
+@subsection SVR4 compatibility options
 @table @code
 @item -V
 Print assembler version.
@@ -52,7 +52,7 @@ Ignored.
 @item -Qn
 Ignored.
 @end table
-@subsection Other options 
+@subsection Other options
 @table @code
 @item -EL
 Select little endian output (this is the default).
@@ -137,7 +137,7 @@ or large_imm@@l,%rn,%rn
 @end smallexample
 @item Load/store with relocatable address expression:
 
-For example, the pseudo-instruction @code{ld.b addr_exp(%rx),%rn} 
+For example, the pseudo-instruction @code{ld.b addr_exp(%rx),%rn}
 will be expanded into:
 @smallexample
 orh addr_exp@@ha,%rx,%r31
@@ -150,7 +150,7 @@ The analogous expansions apply to @code{ld.x, st.x, fld.x, pfld.x, fst.x}, and @
 If any of the arithmetic operations @code{adds, addu, subs, subu} are used
 with an immediate larger than 16-bits (signed), then they will be expanded.
 For instance, the pseudo-instruction @code{adds large_imm,%rx,%rn} expands to:
-@smallexample 
+@smallexample
 orh large_imm@@h,%r0,%r31
 or large_imm@@l,%r31,%r31
 adds %r31,%rx,%rn
diff --git a/gas/doc/c-m32c.texi b/gas/doc/c-m32c.texi
index 54ad154..16acc8d 100644
--- a/gas/doc/c-m32c.texi
+++ b/gas/doc/c-m32c.texi
@@ -11,7 +11,7 @@
 @node Machine Dependencies
 @chapter M32C Dependent Features
 @end ifclear
- 
+
 @cindex M32C support
 
 @code{@value{AS}} can assemble code for several different members of
@@ -23,23 +23,23 @@ change the default to the M32C microprocessor.
 * M32C-Opts::                   M32C Options
 * M32C-Syntax::                 M32C Syntax
 @end menu
- 
+
 @node M32C-Opts
 @section M32C Options
- 
+
 @cindex options, M32C
 @cindex M32C options
- 
+
 The Renesas M32C version of @code{@value{AS}} has these
 machine-dependent options:
- 
+
 @table @code
 @item -m32c
 @cindex @samp{-m32c} option, M32C
 @cindex architecture options, M32C
 @cindex M32C architecture option
 Assemble M32C instructions.
- 
+
 @item -m16c
 @cindex @samp{-m16c} option, M16C
 @cindex architecture options, M16C
@@ -52,7 +52,7 @@ Enable support for link-time relaxations.
 @item -h-tick-hex
 Support H'00 style hex constants in addition to 0x00 style.
 
- 
+
 @end table
 
 @node M32C-Syntax
diff --git a/gas/doc/c-m32r.texi b/gas/doc/c-m32r.texi
index 117f599..7ef313f 100644
--- a/gas/doc/c-m32r.texi
+++ b/gas/doc/c-m32r.texi
@@ -192,7 +192,7 @@ places the lower 16-bits of the result into the immediate-field of the
 instruction.  For example:
 
 @smallexample
-   or3   r0, r0, #low(0x12345678) ; compute r0 = r0 | 0x5678 
+   or3   r0, r0, #low(0x12345678) ; compute r0 = r0 | 0x5678
    add3, r0, r0, #low(fred)   ; compute r0 = r0 + low 16-bits of address of fred
 @end smallexample
 
@@ -203,7 +203,7 @@ places the upper 16-bits of the result into the immediate-field of the
 instruction.  For example:
 
 @smallexample
-   seth  r0, #high(0x12345678) ; compute r0 = 0x12340000 
+   seth  r0, #high(0x12345678) ; compute r0 = 0x12340000
    seth, r0, #high(fred)       ; compute r0 = upper 16-bits of address of fred
 @end smallexample
 
@@ -211,7 +211,7 @@ instruction.  For example:
 @cindex @code{shigh} directive, M32R
 The @code{shigh} directive is very similar to the @code{high}
 directive.  It also computes the value of its expression and places
-the upper 16-bits of the result into the immediate-field of the 
+the upper 16-bits of the result into the immediate-field of the
 instruction.  The difference is that @code{shigh} also checks to see
 if the lower 16-bits could be interpreted as a signed number, and if
 so it assumes that a borrow will occur from the upper-16 bits.  To
@@ -237,15 +237,15 @@ treats its 16-bit immediate argument as unsigned whereas the
 example:
 
 @smallexample
-   seth  r0, #shigh(0x00008000) 
-   add3  r0, r0, #low(0x00008000) 
+   seth  r0, #shigh(0x00008000)
+   add3  r0, r0, #low(0x00008000)
 @end smallexample
 
 Produces the correct result in r0, whereas:
 
 @smallexample
-   seth  r0, #shigh(0x00008000) 
-   or3   r0, r0, #low(0x00008000) 
+   seth  r0, #shigh(0x00008000)
+   or3   r0, r0, #low(0x00008000)
 @end smallexample
 
 Stores 0xffff8000 into r0.
@@ -324,7 +324,7 @@ neg instruction and the input to the move instruction.
 This message is produced when the assembler encounters an instruction
 which is only supported by the M32Rx processor, and the @samp{-m32rx}
 command line flag has not been specified to allow assembly of such
-instructions. 
+instructions.
 
 @item unknown instruction @samp{...}
 This message is produced when the assembler encounters an instruction
@@ -351,8 +351,8 @@ instruction where both components attempt to modify the same register.
 For example these code fragments will produce this message:
 @samp{mv r1, r2 || neg r1, r3}
 @samp{jl r0 || mv r14, r1}
-@samp{st r2, @@-r1 || mv r1, r3} 
-@samp{mv r1, r2 || ld r0, @@r1+} 
+@samp{st r2, @@-r1 || mv r1, r3}
+@samp{mv r1, r2 || ld r0, @@r1+}
 @samp{cmp r1, r2 || addx r3, r4} (Both write to the condition bit)
 
 @end table
diff --git a/gas/doc/c-m68hc11.texi b/gas/doc/c-m68hc11.texi
index bebc53e..2583c01 100644
--- a/gas/doc/c-m68hc11.texi
+++ b/gas/doc/c-m68hc11.texi
@@ -1,5 +1,5 @@
 @c Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 2000, 2003,
-@c 2006, 2011
+@c 2006, 2011, 2012
 @c Free Software Foundation, Inc.
 @c This is part of the GAS manual.
 @c For copying conditions, see the file as.texinfo.
@@ -35,24 +35,40 @@ dependent options.
 
 @cindex @samp{-m68hc11}
 @item -m68hc11
-This option switches the assembler in the M68HC11 mode. In this mode,
+This option switches the assembler into the M68HC11 mode. In this mode,
 the assembler only accepts 68HC11 operands and mnemonics. It produces
 code for the 68HC11.
 
 @cindex @samp{-m68hc12}
 @item -m68hc12
-This option switches the assembler in the M68HC12 mode. In this mode,
+This option switches the assembler into the M68HC12 mode. In this mode,
 the assembler also accepts 68HC12 operands and mnemonics. It produces
 code for the 68HC12. A few 68HC11 instructions are replaced by
 some 68HC12 instructions as recommended by Motorola specifications.
 
 @cindex @samp{-m68hcs12}
 @item -m68hcs12
-This option switches the assembler in the M68HCS12 mode.  This mode is
+This option switches the assembler into the M68HCS12 mode.  This mode is
 similar to @samp{-m68hc12} but specifies to assemble for the 68HCS12
 series.  The only difference is on the assembling of the @samp{movb}
 and @samp{movw} instruction when a PC-relative operand is used.
 
+@cindex @samp{-mm9s12x}
+@item -mm9s12x
+This option switches the assembler into the M9S12X mode.  This mode is
+similar to @samp{-m68hc12} but specifies to assemble for the S12X
+series which is a superset of the HCS12.
+
+@cindex @samp{-mm9s12xg}
+@item -mm9s12xg
+This option switches the assembler into the XGATE mode for the RISC
+co-processor featured on some S12X-family chips.
+
+@cindex @samp{--xgate-ramoffset}
+@item --xgate-ramoffset
+This option instructs the linker to offset RAM addresses from S12X address
+space into XGATE address space.
+
 @cindex @samp{-mshort}
 @item -mshort
 This option controls the ABI and indicates to use a 16-bit integer ABI.
@@ -105,7 +121,7 @@ associated to the @samp{jbra}, @samp{jbsr} and @samp{jbXX} pseudo opcodes.
 The @samp{--force-long-branches} option forces the translation of
 relative branches into absolute branches. This option does not affect
 the optimization associated to the @samp{jbra}, @samp{jbsr} and
-@samp{jbXX} pseudo opcodes. 
+@samp{jbXX} pseudo opcodes.
 
 @cindex @samp{--print-insn-syntax}
 @item --print-insn-syntax
@@ -418,7 +434,7 @@ The following table summarizes the pseudo-operations.
  bra | bra <pc-rel>    <error>  |               jmp <abs>          |
 jbsr | bsr <pc-rel>   jsr <abs> | bsr <pc-rel>  jsr <abs>          |
 jbra | bra <pc-rel>   jmp <abs> | bra <pc-rel>  jmp <abs>          |
- bXX | bXX <pc-rel>    <error>  |               bNX +3; jmp <abs>  | 
+ bXX | bXX <pc-rel>    <error>  |               bNX +3; jmp <abs>  |
 jbXX | bXX <pc-rel>   bNX +3;   | bXX <pc-rel>  bNX +3; jmp <abs>  |
      |                jmp <abs> |                                  |
      +--------------------------+----------------------------------+
diff --git a/gas/doc/c-m68k.texi b/gas/doc/c-m68k.texi
index 9d92aa0..7beca11 100644
--- a/gas/doc/c-m68k.texi
+++ b/gas/doc/c-m68k.texi
@@ -113,7 +113,7 @@ at the beginning of a line.
 
 @cindex @samp{--base-size-default-16}
 @cindex @samp{--base-size-default-32}
-@item --base-size-default-16  --base-size-default-32 
+@item --base-size-default-16  --base-size-default-32
 If you use an addressing mode with a base register without specifying
 the size, @code{@value{AS}} will normally use the full 32 bit value.
 For example, the addressing mode @samp{%a0@@(%d0)} is equivalent to
@@ -346,7 +346,7 @@ The following additional addressing modes are understood:
 
 @table @dfn
 @item Address Register Indirect
-@samp{(%a0)} through @samp{(%a7)}@* 
+@samp{(%a0)} through @samp{(%a7)}@*
 @samp{%a7} is also known as @samp{%sp}, i.e., the Stack Pointer.  @code{%a6}
 is also known as @samp{%fp}, the Frame Pointer.
 
@@ -615,7 +615,7 @@ branch instructions allow both word and long displacements.
 @cindex comments, M680x0
 Line comments are introduced by the @samp{|} character appearing
 anywhere on a line, unless the @option{--bitwise-or} command line option
-has been specified. 
+has been specified.
 
 An asterisk (@samp{*}) as the first character on a line marks the
 start of a line comment as well.
diff --git a/gas/doc/c-microblaze.texi b/gas/doc/c-microblaze.texi
index f1321df..0027019 100644
--- a/gas/doc/c-microblaze.texi
+++ b/gas/doc/c-microblaze.texi
@@ -13,9 +13,9 @@
 @end ifclear
 
 @cindex MicroBlaze architectures
-The Xilinx MicroBlaze processor family includes several variants, all using 
-the same core instruction set.  This chapter covers features of the @sc{gnu} 
-assembler that are specific to the MicroBlaze architecture.  For details about 
+The Xilinx MicroBlaze processor family includes several variants, all using
+the same core instruction set.  This chapter covers features of the @sc{gnu}
+assembler that are specific to the MicroBlaze architecture.  For details about
 the MicroBlaze instruction set, please see the @cite{MicroBlaze Processor
 Reference Guide (UG081)} available at www.xilinx.com.
 
@@ -27,28 +27,28 @@ Reference Guide (UG081)} available at www.xilinx.com.
 
 @node MicroBlaze Directives
 @section Directives
-@cindex MicroBlaze directives 
-A number of assembler directives are available for MicroBlaze. 
+@cindex MicroBlaze directives
+A number of assembler directives are available for MicroBlaze.
 
 @table @code
 @item .data8 @var{expression},...
-This directive is an alias for @code{.byte}. Each expression is assembled 
+This directive is an alias for @code{.byte}. Each expression is assembled
 into an eight-bit value.
 
 @item .data16 @var{expression},...
-This directive is an alias for @code{.hword}. Each expression is assembled 
+This directive is an alias for @code{.hword}. Each expression is assembled
 into an 16-bit value.
 
 @item .data32 @var{expression},...
-This directive is an alias for @code{.word}. Each expression is assembled 
+This directive is an alias for @code{.word}. Each expression is assembled
 into an 32-bit value.
 
 @item .ent @var{name}[,@var{label}]
-This directive is an alias for @code{.func} denoting the start of function 
-@var{name} at (optional) @var{label}.  
+This directive is an alias for @code{.func} denoting the start of function
+@var{name} at (optional) @var{label}.
 
 @item .end @var{name}[,@var{label}]
-This directive is an alias for @code{.endfunc} denoting the end of function 
+This directive is an alias for @code{.endfunc} denoting the end of function
 @var{name}.
 
 @item .gpword @var{label},...
diff --git a/gas/doc/c-mips.texi b/gas/doc/c-mips.texi
index 50b54df..741237a 100644
--- a/gas/doc/c-mips.texi
+++ b/gas/doc/c-mips.texi
@@ -14,40 +14,40 @@
 @end ifclear
 
 @cindex MIPS processor
-@sc{gnu} @code{@value{AS}} for @sc{mips} architectures supports several
-different @sc{mips} processors, and MIPS ISA levels I through V, MIPS32,
-and MIPS64.  For information about the @sc{mips} instruction set, see
+@sc{gnu} @code{@value{AS}} for MIPS architectures supports several
+different MIPS processors, and MIPS ISA levels I through V, MIPS32,
+and MIPS64.  For information about the MIPS instruction set, see
 @cite{MIPS RISC Architecture}, by Kane and Heindrich (Prentice-Hall).
-For an overview of @sc{mips} assembly conventions, see ``Appendix D:
+For an overview of MIPS assembly conventions, see ``Appendix D:
 Assembly Language Programming'' in the same work.
 
 @menu
-* MIPS Opts::   	Assembler options
-* MIPS Object:: 	ECOFF object code
-* MIPS Stabs::  	Directives for debugging information
+* MIPS Options::   	Assembler options
+* MIPS Macros:: 	High-level assembly macros
+* MIPS Symbol Sizes::	Directives to override the size of symbols
+* MIPS Small Data:: 	Controlling the use of small data accesses
 * MIPS ISA::    	Directives to override the ISA level
-* MIPS symbol sizes::   Directives to override the size of symbols
+* MIPS assembly options:: Directives to control code generation
 * MIPS autoextend::	Directives for extending MIPS 16 bit instructions
 * MIPS insn::		Directive to mark data as an instruction
-* MIPS option stack::	Directives to save and restore options
-* MIPS ASE instruction generation overrides:: Directives to control
+* MIPS Option Stack::	Directives to save and restore options
+* MIPS ASE Instruction Generation Overrides:: Directives to control
   			generation of MIPS ASE instructions
-* MIPS floating-point:: Directives to override floating-point options
+* MIPS Floating-Point:: Directives to override floating-point options
 * MIPS Syntax::         MIPS specific syntactical considerations
 @end menu
 
-@node MIPS Opts
+@node MIPS Options
 @section Assembler options
 
-The @sc{mips} configurations of @sc{gnu} @code{@value{AS}} support these
+The MIPS configurations of @sc{gnu} @code{@value{AS}} support these
 special options:
 
 @table @code
 @cindex @code{-G} option (MIPS)
 @item -G @var{num}
-This option sets the largest size of an object that can be referenced
-implicitly with the @code{gp} register.  It is only accepted for targets
-that use @sc{ecoff} format.  The default value is 8.
+Set the ``small data'' limit to @var{n} bytes.  The default limit is 8 bytes.
+@xref{MIPS Small Data,, Controlling the use of small data accesses}.
 
 @cindex @code{-EB} option (MIPS)
 @cindex @code{-EL} option (MIPS)
@@ -57,7 +57,7 @@ that use @sc{ecoff} format.  The default value is 8.
 @cindex little-endian output, MIPS
 @item -EB
 @itemx -EL
-Any @sc{mips} configuration of @code{@value{AS}} can select big-endian or
+Any MIPS configuration of @code{@value{AS}} can select big-endian or
 little-endian output at run time (unlike the other @sc{gnu} development
 tools, which must be configured for one or the other).  Use @samp{-EB}
 to select big-endian output, and @samp{-EL} for little-endian.
@@ -79,23 +79,20 @@ VxWorks-style position-independent macro expansions.
 @itemx -mips2
 @itemx -mips3
 @itemx -mips4
-@itemx -mips5xo
+@itemx -mips5
 @itemx -mips32
 @itemx -mips32r2
 @itemx -mips64
 @itemx -mips64r2
 Generate code for a particular MIPS Instruction Set Architecture level.
-@samp{-mips1} corresponds to the @sc{r2000} and @sc{r3000} processors,
-@samp{-mips2} to the @sc{r6000} processor, @samp{-mips3} to the
-@sc{r4000} processor, and @samp{-mips4} to the @sc{r8000} and
-@sc{r10000} processors.  @samp{-mips5}, @samp{-mips32}, @samp{-mips32r2},
-@samp{-mips64}, and @samp{-mips64r2}
-correspond to generic
-@sc{MIPS V}, @sc{MIPS32}, @sc{MIPS32 Release 2}, @sc{MIPS64},
-and @sc{MIPS64 Release 2}
-ISA processors, respectively.  You can also switch
-instruction sets during the assembly; see @ref{MIPS ISA, Directives to
-override the ISA level}.
+@samp{-mips1} corresponds to the R2000 and R3000 processors,
+@samp{-mips2} to the R6000 processor, @samp{-mips3} to the
+R4000 processor, and @samp{-mips4} to the R8000 and R10000 processors.
+@samp{-mips5}, @samp{-mips32}, @samp{-mips32r2}, @samp{-mips64}, and
+@samp{-mips64r2} correspond to generic MIPS V, MIPS32, MIPS32 Release 2,
+MIPS64, and MIPS64 Release 2 ISA processors, respectively.  You can also
+switch instruction sets during the assembly; see @ref{MIPS ISA,
+Directives to override the ISA level}.
 
 @item -mgp32
 @itemx -mfp32
@@ -181,6 +178,22 @@ Generate code for the MCU Application Specific Extension.
 This tells the assembler to accept MCU instructions.
 @samp{-mno-mcu} turns off this option.
 
+@item -mvirt
+@itemx -mno-virt
+Generate code for the Virtualization Application Specific Extension.
+This tells the assembler to accept Virtualization instructions.
+@samp{-mno-virt} turns off this option.
+
+@item -minsn32
+@itemx -mno-insn32
+Only use 32-bit instruction encodings when generating code for the
+microMIPS processor.  This option inhibits the use of any 16-bit
+instructions.  This is equivalent to putting @code{.set insn32} at
+the start of the assembly file.  @samp{-mno-insn32} turns off this
+option.  This is equivalent to putting @code{.set noinsn32} at the
+start of the assembly file.  By default @samp{-mno-insn32} is
+selected, allowing all instructions to be used.
+
 @item -mfix7000
 @itemx -mno-fix7000
 Cause nops to be inserted if the read of the destination register
@@ -196,8 +209,8 @@ batches, but this fix has no side effect to them.
 @item -mfix-loongson2f-nop
 @itemx -mno-fix-loongson2f-nop
 Replace nops by @code{or at,at,zero} to work around the Loongson2F
-@samp{nop} errata.  Without it, under extreme cases, cpu might
-deadlock.  The issue has been solved in latest loongson2f batches, but
+@samp{nop} errata.  Without it, under extreme cases, the CPU might
+deadlock.  The issue has been solved in later Loongson2F batches, but
 this fix has no side effect to them.
 
 @item -mfix-vr4120
@@ -211,7 +224,7 @@ all problems in hand-written assembler code.
 Insert nops to work around the VR4130 @samp{mflo}/@samp{mfhi} errata.
 
 @item -mfix-24k
-@itemx -no-mfix-24k
+@itemx -mno-fix-24k
 Insert nops to work around the 24K @samp{eret}/@samp{deret} errata.
 
 @item -mfix-cn63xxp1
@@ -221,15 +234,15 @@ certain CN63XXP1 errata.
 
 @item -m4010
 @itemx -no-m4010
-Generate code for the LSI @sc{r4010} chip.  This tells the assembler to
-accept the @sc{r4010} specific instructions (@samp{addciu}, @samp{ffc},
+Generate code for the LSI R4010 chip.  This tells the assembler to
+accept the R4010-specific instructions (@samp{addciu}, @samp{ffc},
 etc.), and to not schedule @samp{nop} instructions around accesses to
 the @samp{HI} and @samp{LO} registers.  @samp{-no-m4010} turns off this
 option.
 
 @item -m4650
 @itemx -no-m4650
-Generate code for the MIPS @sc{r4650} chip.  This tells the assembler to accept
+Generate code for the MIPS R4650 chip.  This tells the assembler to accept
 the @samp{mad} and @samp{madu} instruction, and to not schedule @samp{nop}
 instructions around accesses to the @samp{HI} and @samp{LO} registers.
 @samp{-no-m4650} turns off this option.
@@ -239,11 +252,11 @@ instructions around accesses to the @samp{HI} and @samp{LO} registers.
 @itemx -m4100
 @itemx -no-m4100
 For each option @samp{-m@var{nnnn}}, generate code for the MIPS
-@sc{r@var{nnnn}} chip.  This tells the assembler to accept instructions
+R@var{nnnn} chip.  This tells the assembler to accept instructions
 specific to that chip, and to schedule for that chip's hazards.
 
 @item -march=@var{cpu}
-Generate code for a particular MIPS cpu.  It is exactly equivalent to
+Generate code for a particular MIPS CPU.  It is exactly equivalent to
 @samp{-m@var{cpu}}, except that there are more value of @var{cpu}
 understood.  Valid @var{cpu} value are:
 
@@ -290,6 +303,8 @@ m4k,
 m4kp,
 m14k,
 m14kc,
+m14ke,
+m14kec,
 24kc,
 24kf2_1,
 24kf,
@@ -302,6 +317,7 @@ m14kc,
 34kf2_1,
 34kf,
 34kf1_1,
+34kn,
 74kc,
 74kf2_1,
 74kf,
@@ -321,7 +337,10 @@ loongson2e,
 loongson2f,
 loongson3a,
 octeon,
-xlr
+octeon+,
+octeon2,
+xlr,
+xlp
 @end quotation
 
 For compatibility reasons, @samp{@var{n}x} and @samp{@var{b}fx} are
@@ -329,7 +348,7 @@ accepted as synonyms for @samp{@var{n}f1_1}.  These values are
 deprecated.
 
 @item -mtune=@var{cpu}
-Schedule and tune for a particular MIPS cpu.  Valid @var{cpu} values are
+Schedule and tune for a particular MIPS CPU.  Valid @var{cpu} values are
 identical to @samp{-march=@var{cpu}}.
 
 @item -mabi=@var{abi}
@@ -341,7 +360,7 @@ are: @samp{32}, @samp{n32}, @samp{o64}, @samp{64} and @samp{eabi}.
 @cindex -msym32
 @cindex -mno-sym32
 Equivalent to adding @code{.set sym32} or @code{.set nosym32} to
-the beginning of the assembler input.  @xref{MIPS symbol sizes}.
+the beginning of the assembler input.  @xref{MIPS Symbol Sizes}.
 
 @cindex @code{-nocpp} ignored (MIPS)
 @item -nocpp
@@ -376,6 +395,27 @@ width register by the single width registers.
 By default @code{--construct-floats} is selected, allowing construction
 of these floating point constants.
 
+@item --relax-branch
+@itemx --no-relax-branch
+The @samp{--relax-branch} option enables the relaxation of out-of-range
+branches.  Any branches whose target cannot be reached directly are
+converted to a small instruction sequence including an inverse-condition
+branch to the physically next instruction, and a jump to the original
+target is inserted between the two instructions.  In PIC code the jump
+will involve further instructions for address calculation.
+
+The @code{BC1ANY2F}, @code{BC1ANY2T}, @code{BC1ANY4F}, @code{BC1ANY4T},
+@code{BPOSGE32} and @code{BPOSGE64} instructions are excluded from
+relaxation, because they have no complementing counterparts.  They could
+be relaxed with the use of a longer sequence involving another branch,
+however this has not been implemented and if their target turns out of
+reach, they produce an error even if branch relaxation is enabled.
+
+Also no MIPS16 branches are ever relaxed.
+
+By default @samp{--no-relax-branch} is selected, causing any out-of-range
+branches to produce an error.
+
 @item --trap
 @itemx --no-break
 @c FIXME!  (1) reflect these options (next item too) in option summaries;
@@ -407,58 +447,71 @@ efficient.  This option only affects the handling of the
 @samp{.cpload} and @samp{.cpsetup} pseudo-ops.
 @end table
 
-@node MIPS Object
-@section MIPS ECOFF object code
-
-@cindex ECOFF sections
-@cindex MIPS ECOFF sections
-Assembling for a @sc{mips} @sc{ecoff} target supports some additional sections
-besides the usual @code{.text}, @code{.data} and @code{.bss}.  The
-additional sections are @code{.rdata}, used for read-only data,
-@code{.sdata}, used for small data, and @code{.sbss}, used for small
-common objects.
-
-@cindex small objects, MIPS ECOFF
-@cindex @code{gp} register, MIPS
-When assembling for @sc{ecoff}, the assembler uses the @code{$gp} (@code{$28})
-register to form the address of a ``small object''.  Any object in the
-@code{.sdata} or @code{.sbss} sections is considered ``small'' in this sense.
-For external objects, or for objects in the @code{.bss} section, you can use
-the @code{@value{GCC}} @samp{-G} option to control the size of objects addressed via
-@code{$gp}; the default value is 8, meaning that a reference to any object
-eight bytes or smaller uses @code{$gp}.  Passing @samp{-G 0} to
-@code{@value{AS}} prevents it from using the @code{$gp} register on the basis
-of object size (but the assembler uses @code{$gp} for objects in @code{.sdata}
-or @code{sbss} in any case).  The size of an object in the @code{.bss} section
-is set by the @code{.comm} or @code{.lcomm} directive that defines it.  The
-size of an external object may be set with the @code{.extern} directive.  For
-example, @samp{.extern sym,4} declares that the object at @code{sym} is 4 bytes
-in length, whie leaving @code{sym} otherwise undefined.
-
-Using small @sc{ecoff} objects requires linker support, and assumes that the
-@code{$gp} register is correctly initialized (normally done automatically by
-the startup code).  @sc{mips} @sc{ecoff} assembly code must not modify the
-@code{$gp} register.
-
-@node MIPS Stabs
-@section Directives for debugging information
-
-@cindex MIPS debugging directives
-@sc{mips} @sc{ecoff} @code{@value{AS}} supports several directives used for
-generating debugging information which are not support by traditional @sc{mips}
-assemblers.  These are @code{.def}, @code{.endef}, @code{.dim}, @code{.file},
-@code{.scl}, @code{.size}, @code{.tag}, @code{.type}, @code{.val},
-@code{.stabd}, @code{.stabn}, and @code{.stabs}.  The debugging information
-generated by the three @code{.stab} directives can only be read by @sc{gdb},
-not by traditional @sc{mips} debuggers (this enhancement is required to fully
-support C++ debugging).  These directives are primarily used by compilers, not
-assembly language programmers!
-
-@node MIPS symbol sizes
+@node MIPS Macros
+@section High-level assembly macros
+
+MIPS assemblers have traditionally provided a wider range of
+instructions than the MIPS architecture itself.  These extra
+instructions are usually referred to as ``macro'' instructions
+@footnote{The term ``macro'' is somewhat overloaded here, since
+these macros have no relation to those defined by @code{.macro},
+@pxref{Macro,, @code{.macro}}.}.
+
+Some MIPS macro instructions extend an underlying architectural instruction
+while others are entirely new.  An example of the former type is @code{and},
+which allows the third operand to be either a register or an arbitrary
+immediate value.  Examples of the latter type include @code{bgt}, which
+branches to the third operand when the first operand is greater than
+the second operand, and @code{ulh}, which implements an unaligned
+2-byte load.
+
+One of the most common extensions provided by macros is to expand
+memory offsets to the full address range (32 or 64 bits) and to allow
+symbolic offsets such as @samp{my_data + 4} to be used in place of
+integer constants.  For example, the architectural instruction
+@code{lbu} allows only a signed 16-bit offset, whereas the macro
+@code{lbu} allows code such as @samp{lbu $4,array+32769($5)}.
+The implementation of these symbolic offsets depends on several factors,
+such as whether the assembler is generating SVR4-style PIC (selected by
+@option{-KPIC}, @pxref{MIPS Options,, Assembler options}), the size of symbols
+(@pxref{MIPS Symbol Sizes,, Directives to override the size of symbols}),
+and the small data limit (@pxref{MIPS Small Data,, Controlling the use
+of small data accesses}).
+
+@kindex @code{.set macro}
+@kindex @code{.set nomacro}
+Sometimes it is undesirable to have one assembly instruction expand
+to several machine instructions.  The directive @code{.set nomacro}
+tells the assembler to warn when this happens.  @code{.set macro}
+restores the default behavior.
+
+@cindex @code{at} register, MIPS
+@kindex @code{.set at=@var{reg}}
+Some macro instructions need a temporary register to store intermediate
+results.  This register is usually @code{$1}, also known as @code{$at},
+but it can be changed to any core register @var{reg} using
+@code{.set at=@var{reg}}.  Note that @code{$at} always refers
+to @code{$1} regardless of which register is being used as the
+temporary register.
+
+@kindex @code{.set at}
+@kindex @code{.set noat}
+Implicit uses of the temporary register in macros could interfere with
+explicit uses in the assembly code.  The assembler therefore warns
+whenever it sees an explicit use of the temporary register.  The directive
+@code{.set noat} silences this warning while @code{.set at} restores
+the default behavior.  It is safe to use @code{.set noat} while
+@code{.set nomacro} is in effect since single-instruction macros
+never need a temporary register.
+
+Note that while the @sc{gnu} assembler provides these macros for compatibility,
+it does not make any attempt to optimize them with the surrounding code.
+
+@node MIPS Symbol Sizes
 @section Directives to override the size of symbols
 
-@cindex @code{.set sym32}
-@cindex @code{.set nosym32}
+@kindex @code{.set sym32}
+@kindex @code{.set nosym32}
 The n64 ABI allows symbols to have any 64-bit value.  Although this
 provides a great deal of flexibility, it means that some macros have
 much longer expansions than their 32-bit counterparts.  For example,
@@ -509,22 +562,78 @@ symbol size using the command-line options @option{-msym32} and
 These options and directives are always accepted, but at present,
 they have no effect for anything other than n64.
 
+@node MIPS Small Data
+@section Controlling the use of small data accesses
+
+@c This section deliberately glosses over the possibility of using -G
+@c in SVR4-style PIC, as could be done on IRIX.  We don't support that.
+@cindex small data, MIPS
+@cindex @code{gp} register, MIPS
+It often takes several instructions to load the address of a symbol.
+For example, when @samp{addr} is a 32-bit symbol, the non-PIC expansion
+of @samp{dla $4,addr} is usually:
+
+@smallexample
+lui     $4,%hi(addr)
+daddiu  $4,$4,%lo(addr)
+@end smallexample
+
+The sequence is much longer when @samp{addr} is a 64-bit symbol.
+@xref{MIPS Symbol Sizes,, Directives to override the size of symbols}.
+
+In order to cut down on this overhead, most embedded MIPS systems
+set aside a 64-kilobyte ``small data'' area and guarantee that all
+data of size @var{n} and smaller will be placed in that area.
+The limit @var{n} is passed to both the assembler and the linker
+using the command-line option @option{-G @var{n}}, @pxref{MIPS Options,,
+Assembler options}.  Note that the same value of @var{n} must be used
+when linking and when assembling all input files to the link; any
+inconsistency could cause a relocation overflow error.
+
+The size of an object in the @code{.bss} section is set by the
+@code{.comm} or @code{.lcomm} directive that defines it.  The size of
+an external object may be set with the @code{.extern} directive.  For
+example, @samp{.extern sym,4} declares that the object at @code{sym}
+is 4 bytes in length, while leaving @code{sym} otherwise undefined.
+
+When no @option{-G} option is given, the default limit is 8 bytes.
+The option @option{-G 0} prevents any data from being automatically
+classified as small.
+
+It is also possible to mark specific objects as small by putting them
+in the special sections @code{.sdata} and @code{.sbss}, which are
+``small'' counterparts of @code{.data} and @code{.bss} respectively.
+The toolchain will treat such data as small regardless of the
+@option{-G} setting.
+
+On startup, systems that support a small data area are expected to
+initialize register @code{$28}, also known as @code{$gp}, in such a
+way that small data can be accessed using a 16-bit offset from that
+register.  For example, when @samp{addr} is small data,
+the @samp{dla $4,addr} instruction above is equivalent to:
+
+@smallexample
+daddiu  $4,$28,%gp_rel(addr)
+@end smallexample
+
+Small data is not supported for SVR4-style PIC.
+
 @node MIPS ISA
 @section Directives to override the ISA level
 
 @cindex MIPS ISA override
 @kindex @code{.set mips@var{n}}
 @sc{gnu} @code{@value{AS}} supports an additional directive to change
-the @sc{mips} Instruction Set Architecture level on the fly: @code{.set
+the MIPS Instruction Set Architecture level on the fly: @code{.set
 mips@var{n}}.  @var{n} should be a number from 0 to 5, or 32, 32r2, 64
 or 64r2.
 The values other than 0 make the assembler accept instructions
-for the corresponding @sc{isa} level, from that point on in the
+for the corresponding ISA level, from that point on in the
 assembly.  @code{.set mips@var{n}} affects not only which instructions
 are permitted, but also how certain macros are expanded.  @code{.set
-mips0} restores the @sc{isa} level to its original level: either the
+mips0} restores the ISA level to its original level: either the
 level you selected with command line options, or the default for your
-configuration.  You can use this feature to permit specific @sc{mips3}
+configuration.  You can use this feature to permit specific MIPS III
 instructions while assembling in 32 bit mode.  Use this directive with
 care!
 
@@ -540,13 +649,27 @@ The directive @code{.set mips16} puts the assembler into MIPS 16 mode,
 in which it will assemble instructions for the MIPS 16 processor.  Use
 @code{.set nomips16} to return to normal 32 bit mode.
 
-Traditional @sc{mips} assemblers do not support this directive.
+Traditional MIPS assemblers do not support this directive.
 
 The directive @code{.set micromips} puts the assembler into microMIPS mode,
 in which it will assemble instructions for the microMIPS processor.  Use
 @code{.set nomicromips} to return to normal 32 bit mode.
 
-Traditional @sc{mips} assemblers do not support this directive.
+Traditional MIPS assemblers do not support this directive.
+
+@node MIPS assembly options
+@section Directives to control code generation
+
+@cindex MIPS 32-bit microMIPS instruction generation override
+@kindex @code{.set insn32}
+@kindex @code{.set noinsn32}
+The directive @code{.set insn32} makes the assembler only use 32-bit
+instruction encodings when generating code for the microMIPS processor.
+This directive inhibits the use of any 16-bit instructions from that
+point on in the assembly.  The @code{.set noinsn32} directive allows
+16-bit instructions to be accepted.
+
+Traditional MIPS assemblers do not support this directive.
 
 @node MIPS autoextend
 @section Directives for extending MIPS 16 bit instructions
@@ -561,7 +684,7 @@ must be explicitly extended with the @code{.e} modifier (e.g.,
 to once again automatically extend instructions when necessary.
 
 This directive is only meaningful when in MIPS 16 mode.  Traditional
-@sc{mips} assemblers do not support this directive.
+MIPS assemblers do not support this directive.
 
 @node MIPS insn
 @section Directive to mark data as an instruction
@@ -596,10 +719,10 @@ bar:
         .word 0x0
 baz:
         .word 0x1
-        
+
 @end example
 
-@node MIPS option stack
+@node MIPS Option Stack
 @section Directives to save and restore options
 
 @cindex MIPS option stack
@@ -615,9 +738,9 @@ These directives can be useful inside an macro which must change an
 option such as the ISA level or instruction reordering but does not want
 to change the state of the code which invoked the macro.
 
-Traditional @sc{mips} assemblers do not support these directives.
+Traditional MIPS assemblers do not support these directives.
 
-@node MIPS ASE instruction generation overrides
+@node MIPS ASE Instruction Generation Overrides
 @section Directives to control generation of MIPS ASE instructions
 
 @cindex MIPS MIPS-3D instruction generation override
@@ -633,7 +756,7 @@ instructions from being accepted.
 @kindex @code{.set nosmartmips}
 The directive @code{.set smartmips} makes the assembler accept
 instructions from the SmartMIPS Application Specific Extension to the
-MIPS32 @sc{isa} from that point on in the assembly.  The
+MIPS32 ISA from that point on in the assembly.  The
 @code{.set nosmartmips} directive prevents SmartMIPS instructions from
 being accepted.
 
@@ -678,9 +801,17 @@ from the MCU Application Specific Extension from that point on
 in the assembly.  The @code{.set nomcu} directive prevents MCU
 instructions from being accepted.
 
-Traditional @sc{mips} assemblers do not support these directives.
+@cindex Virtualization instruction generation override
+@kindex @code{.set virt}
+@kindex @code{.set novirt}
+The directive @code{.set virt} makes the assembler accept instructions
+from the Virtualization Application Specific Extension from that point
+on in the assembly.  The @code{.set novirt} directive prevents Virtualization
+instructions from being accepted.
+
+Traditional MIPS assemblers do not support these directives.
 
-@node MIPS floating-point
+@node MIPS Floating-Point
 @section Directives to override floating-point options
 
 @cindex Disable floating-point instructions
@@ -701,7 +832,7 @@ float-point operations.  These directives always override the default
 (that double-precision operations are accepted) or the command-line
 options (@samp{-msingle-float} and @samp{-mdouble-float}).
 
-Traditional @sc{mips} assemblers do not support these directives.
+Traditional MIPS assemblers do not support these directives.
 
 @node MIPS Syntax
 @section Syntactical considerations for the MIPS assembler
diff --git a/gas/doc/c-msp430.texi b/gas/doc/c-msp430.texi
index e5db407..538133a 100644
--- a/gas/doc/c-msp430.texi
+++ b/gas/doc/c-msp430.texi
@@ -1,4 +1,4 @@
-@c Copyright 2002, 2004, 2005, 2011 Free Software Foundation, Inc.
+@c Copyright 2002-2013 Free Software Foundation, Inc.
 @c This is part of the GAS manual.
 @c For copying conditions, see the file as.texinfo.
 @ifset GENERIC
@@ -28,14 +28,35 @@
 @cindex options for MSP430 (none)
 @table @code
 
-@item -m
-select the mpu arch. Currently has no effect.
-@item -mP 
+@item -mmcu
+selects the mpu arch.  If the architecture is 430Xv2 then this also
+enables NOP generation unless the @option{-mN} is also specified.
+
+@item -mcpu
+selects the cpu architecture.  If the architecture is 430Xv2 then this
+also enables NOP generation unless the @option{-mN} is also
+specified.
+
+@item -mP
 enables polymorph instructions handler.
 
-@item -mQ 
+@item -mQ
 enables relaxation at assembly time. DANGEROUS!
 
+@item -ml
+indicates that the input uses the large code model.
+
+@item -mN
+disables the generation of a NOP instruction following any instruction
+that might change the interrupts enabled/disabled state.  For the
+430Xv2 architecture the instructions: @code{EINT}, @code{DINT},
+@code{BIC #8, SR}, @code{BIS #8, SR} and @code{MOV.W <>, SR} must be
+followed by a NOP instruction in order to ensure the correct
+processing of interrupts.  By default generation of the NOP
+instruction happens automatically, but this command line option
+disables this behaviour.  It is then up to the programmer to ensure
+that interrupts are enabled and disabled correctly.
+
 @end table
 
 @node MSP430 Syntax
@@ -60,7 +81,7 @@ Additional built-in macros are:
 
 @table @code
 
-@item llo(exp) 
+@item llo(exp)
 Extracts least significant word from 32-bit expression 'exp'.
 
 @item lhi(exp)
@@ -69,17 +90,17 @@ Extracts most significant word from 32-bit expression 'exp'.
 @item hlo(exp)
 Extracts 3rd word from 64-bit expression 'exp'.
 
-@item 	hhi(exp) 
+@item 	hhi(exp)
 Extracts 4rd word from 64-bit expression 'exp'.
 
 @end table
 
 They normally being used as an immediate source operand.
 @smallexample
-    mov	#llo(1), r10	;	== mov	#1, r10	
+    mov	#llo(1), r10	;	== mov	#1, r10
     mov	#lhi(1), r10	;	== mov	#0, r10
 @end smallexample
-	
+
 @node MSP430-Chars
 @subsection Special Characters
 
@@ -101,7 +122,7 @@ separated by the @samp{@{} character.
 
 @cindex identifiers, MSP 430
 @cindex MSP 430 identifiers
-The character @samp{$} in jump instructions indicates current location and 
+The character @samp{$} in jump instructions indicates current location and
 implemented only for TI syntax compatibility.
 
 @node MSP430-Regs
@@ -215,10 +236,15 @@ used for the directive called @code{.app-file} in the MSP 430 support.
 This directive is ignored; it is accepted for compatibility with other
 MSP 430 assemblers.
 
-@cindex @code{sect} directive, MSP 430
+@cindex @code{arch} directive, MSP 430
 @item .arch
-Currently this directive is ignored; it is accepted for compatibility with other
-MSP 430 assemblers.
+Sets the target microcontroller in the same way as the @option{-mmcu}
+command line option.
+
+@cindex @code{cpu} directive, MSP 430
+@item .cpu
+Sets the target architecture in the same way as the @option{-mcpu}
+command line option.
 
 @cindex @code{profiler} directive, MSP 430
 @item .profiler
@@ -264,43 +290,43 @@ where:
 
 @samp{flags} is a combination of the following characters:
 
-@item  s 
+@item  s
 function entry
-@item  x  
+@item  x
 function exit
-@item  i  
+@item  i
 function is in init section
-@item  f  
+@item  f
 function is in fini section
-@item  l  
+@item  l
 library call
-@item  c  
+@item  c
 libc standard call
-@item  d  
+@item  d
 stack value demand
-@item  I  
+@item  I
 interrupt service routine
-@item  P  
+@item  P
 prologue start
-@item  p  
+@item  p
 prologue end
-@item  E  
+@item  E
 epilogue start
-@item  e  
+@item  e
 epilogue end
-@item  j  
+@item  j
 long jump / sjlj unwind
-@item  a  
+@item  a
 an arbitrary code fragment
 @item t
 extra parameter saved (a constant value like frame size)
 @end table
 
-@item function_to_profile 
+@item function_to_profile
 a function address
-@item cycle_corrector  
+@item cycle_corrector
 a value which should be added to the cycle counter, zero if omitted.
-@item extra  
+@item extra
 any extra parameter, zero if omitted.
 
 @end table
@@ -319,7 +345,7 @@ fxx:
   push r8
 .profiler "cdpt",fxx,0, .LFrameOffset_fxx  ; check stack value at this point
 					  ; (this is a prologue end)
-					  ; note, that spare var filled with 
+					  ; note, that spare var filled with
 					  ; the farme size
   mov r15,r8
 ...
diff --git a/gas/doc/c-mt.texi b/gas/doc/c-mt.texi
index d6d2812..02843f2 100644
--- a/gas/doc/c-mt.texi
+++ b/gas/doc/c-mt.texi
@@ -32,7 +32,7 @@
 This option specifies the target processor.  The assembler will issue an
 error message if an attempt is made to assemble an instruction which
 will not execute on the target processor.  The following processor names are
-recognized: 
+recognized:
 @code{ms1-64-001},
 @code{ms1-16-002},
 @code{ms1-16-003},
diff --git a/gas/doc/c-ppc.texi b/gas/doc/c-ppc.texi
index 2e762a5..c2209ed 100644
--- a/gas/doc/c-ppc.texi
+++ b/gas/doc/c-ppc.texi
@@ -115,9 +115,15 @@ Generate code for PowerPC e300 family.
 @item -maltivec
 Generate code for processors with AltiVec instructions.
 
+@item -mvle
+Generate code for Freescale PowerPC VLE instructions.
+
 @item -mvsx
 Generate code for processors with Vector-Scalar (VSX) instructions.
 
+@item -mhtm
+Generate code for processors with Hardware Transactional Memory instructions.
+
 @item -mpower4, -mpwr4
 Generate code for Power4 architecture.
 
@@ -130,6 +136,10 @@ Generate code for Power6 architecture.
 @item -mpower7, -mpwr7
 Generate code for Power7 architecture.
 
+@item -mpower8, -mpwr8
+Generate code for Power8 architecture.
+
+@item -mcell
 @item -mcell
 Generate code for Cell Broadband Engine architecture.
 
diff --git a/gas/doc/c-rx.texi b/gas/doc/c-rx.texi
index 183fbe3..d6390c8 100644
--- a/gas/doc/c-rx.texi
+++ b/gas/doc/c-rx.texi
@@ -74,11 +74,38 @@ This is the default.
 @item -msmall-data-limit
 This option tells the assembler that the small data limit feature of
 the RX port of GCC is being used.  This results in the assembler
-generating an undefined reference to a symbol called __gp for use by
-the relocations that are needed to support the small data limit
+generating an undefined reference to a symbol called @code{__gp} for
+use by the relocations that are needed to support the small data limit
 feature.   This option is not enabled by default as it would otherwise
 pollute the symbol table.
 
+@cindex @samp{-mpid}
+@item -mpid
+This option tells the assembler that the position independent data of the
+RX port of GCC is being used.  This results in the assembler
+generating an undefined reference to a symbol called @code{__pid_base},
+and also setting the RX_PID flag bit in the e_flags field of the ELF
+header of the object file.
+
+@cindex @samp{-mint-register}
+@item -mint-register=@var{num}
+This option tells the assembler how many registers have been reserved
+for use by interrupt handlers.  This is needed in order to compute the
+correct values for the @code{%gpreg} and @code{%pidreg} meta registers.
+
+@cindex @samp{-mgcc-abi}
+@item -mgcc-abi
+This option tells the assembler that the old GCC ABI is being used by
+the assembled code.  With this version of the ABI function arguments
+that are passed on the stack are aligned to a 32-bit boundary.
+
+@cindex @samp{-mrx-abi}
+@item -mrx-abi
+This option tells the assembler that the official RX ABI is being used
+by the assembled code.  With this version of the ABI function
+arguments that are passed on the stack are aligned to their natural
+alignments.  This option is the default.
+
 @end table
 
 @node RX-Modifiers
@@ -86,22 +113,45 @@ pollute the symbol table.
 
 @cindex RX modifiers
 @cindex syntax, RX
+@cindex %gp
 
-The assembler supports several modifiers when using symbol addresses
+The assembler supports one modifier when using symbol addresses
 in RX instruction operands.  The general syntax is the following:
 
 @smallexample
-%modifier(symbol)
+%gp(symbol)
+@end smallexample
+
+The modifier returns the offset from the @var{__gp} symbol to the
+specified symbol as a 16-bit value.  The intent is that this offset
+should be used in a register+offset move instruction when generating
+references to small data.  Ie, like this:
+
+@smallexample
+  mov.W	 %gp(_foo)[%gpreg], r1
 @end smallexample
 
+The assembler also supports two meta register names which can be used
+to refer to registers whose values may not be known to the
+programmer.  These meta register names are:
+
 @table @code
-@cindex symbol modifiers
 
-@item %gp
-@c FIXME: Add documentation here.
+@cindex @samp{%gpreg}
+@item %gpreg
+The small data address register.
+
+@cindex @samp{%pidreg}
+@item %pidreg
+The PID base address register.
 
 @end table
 
+Both registers normally have the value r13, but this can change if
+some registers have been reserved for use by interrupt handlers or if
+both the small data limit and position independent data features are
+being used at the same time.
+
 @node RX-Directives
 @section Assembler Directives
 
@@ -118,6 +168,16 @@ assembler directives:
 @cindex RX assembler directive .3byte
 Inserts a 3-byte value into the output file at the current location.
 
+@item .fetchalign
+@cindex assembler directive .fetchalign, RX
+@cindex RX assembler directive .fetchalign
+If the next opcode following this directive spans a fetch line
+boundary (8 byte boundary), the opcode is aligned to that boundary.
+If the next opcode does not span a fetch line, this directive has no
+effect.  Note that one or more labels may be between this directive
+and the opcode; those labels are aligned as well.  Any inserted bytes
+due to alignment will form a NOP opcode.
+
 @end table
 
 @node RX-Float
diff --git a/gas/doc/c-s390.texi b/gas/doc/c-s390.texi
index 7971327..1935fb3 100644
--- a/gas/doc/c-s390.texi
+++ b/gas/doc/c-s390.texi
@@ -17,7 +17,7 @@
 The s390 version of @code{@value{AS}} supports two architectures modes
 and seven chip levels. The architecture modes are the Enterprise System
 Architecture (ESA) and the newer z/Architecture mode. The chip levels
-are g5, g6, z900, z990, z9-109, z9-ec, z10 and z196.
+are g5, g6, z900, z990, z9-109, z9-ec, z10, z196, and zEC12.
 
 @menu
 * s390 Options::                Command-line Options.
@@ -33,7 +33,7 @@ are g5, g6, z900, z990, z9-109, z9-ec, z10 and z196.
 @cindex s390 options
 
 The following table lists all available s390 specific options:
- 
+
 @table @code
 @cindex @samp{-m31} option, s390
 @cindex @samp{-m64} option, s390
@@ -58,7 +58,7 @@ message.
 @cindex @samp{-march=} option, s390
 @item -march=@var{CPU}
 This option specifies the target processor. The following processor names
-are recognized: 
+are recognized:
 @code{g5},
 @code{g6},
 @code{z900},
@@ -110,9 +110,9 @@ statements.
 @cindex instruction syntax, s390
 @cindex s390 instruction syntax
 
-The assembler syntax closely follows the syntax outlined in 
-Enterprise Systems Architecture/390 Principles of Operation (SA22-7201) 
-and the z/Architecture Principles of Operation (SA22-7832). 
+The assembler syntax closely follows the syntax outlined in
+Enterprise Systems Architecture/390 Principles of Operation (SA22-7201)
+and the z/Architecture Principles of Operation (SA22-7832).
 
 Each instruction has two major parts, the instruction mnemonic
 and the instruction operands. The instruction format varies.
@@ -297,7 +297,7 @@ field. The notation changes as follows:
 
 The Principles of Operation manuals lists 26 instruction formats where
 some of the formats have multiple variants. For the @samp{.insn}
-pseudo directive the assembler recognizes some of the formats. 
+pseudo directive the assembler recognizes some of the formats.
 Typically, the most general variant of the instruction format is used
 by the @samp{.insn} directive.
 
@@ -380,7 +380,7 @@ with the @samp{.insn} pseudo directive:
 +--------+----+----+
 | OpCode | R1 | R2 |
 +--------+----+----+
-0        8    12  15  
+0        8    12  15
 @end verbatim
 
 @item RRE format: <insn> R1,R2
@@ -679,7 +679,7 @@ the pc-relative offset from the current instruction to the GOT slot for the
 symbol.
 @item @@gotoff
 The @@gotoff modifier can be used for 16-bit immediate fields. The symbol
-term is replaced with the offset from the start of the GOT to the 
+term is replaced with the offset from the start of the GOT to the
 address of the symbol.
 @item @@gotplt
 The @@gotplt modifier can be used for displacement fields, 16-bit immediate
@@ -703,7 +703,7 @@ of the symbol.
 The @@gotntpoff modifier can be used for displacement fields. The symbol
 is added to the static TLS block and the negated offset to the symbol
 in the static TLS block is added to the GOT. The symbol term is replaced
-with the offset to the GOT slot from the start of the GOT. 
+with the offset to the GOT slot from the start of the GOT.
 @item @@indntpoff
 The @@indntpoff modifier can be used for 32-bit pc-relative immediate
 fields. The symbol is added to the static TLS block and the negated offset
@@ -728,7 +728,7 @@ perform code optimization.
 @item :tls_load
 The :tls_load marker is used to flag the load instruction in the initial
 exec TLS model that retrieves the offset from the thread pointer to a
-thread local storage variable from the GOT. 
+thread local storage variable from the GOT.
 @item :tls_gdcall
 The :tls_gdcall marker is used to flag the branch-and-save instruction to
 the __tls_get_offset function in the global dynamic TLS model.
@@ -783,7 +783,7 @@ entries to the current position.
 @node s390 Directives
 @section Assembler Directives
 
-@code{@value{AS}} for s390 supports all of the standard ELF 
+@code{@value{AS}} for s390 supports all of the standard ELF
 assembler directives as outlined in the main part of this document.
 Some directives have been extended and there are some additional
 directives, which are only available for the s390 @code{@value{AS}}.
@@ -804,7 +804,7 @@ For example, the instruction @samp{l %r1,24(%r15)} could be written as
 @itemx .quad
 This directive places one or more 16-bit (.short), 32-bit (.long), or
 64-bit (.quad) values into the current section. If an ELF or TLS modifier
-is used only the following expressions are allowed: 
+is used only the following expressions are allowed:
 @samp{symbol@@modifier + constant},
 @samp{symbol@@modifier + label + constant}, and
 @samp{symbol@@modifier - label + constant}.
@@ -873,6 +873,19 @@ restored with @code{.machine pop}.  Be aware that the cpu string has
 to be put into double quotes in case it contains characters not
 appropriate for identifiers.  So you have to write @code{"z9-109"}
 instead of just @code{z9-109}.
+
+@cindex @code{.machinemode} directive, s390
+@item .machinemode string
+This directive allows to change the architecture mode for which code
+is being generated.  @code{string} may be @code{esa}, @code{zarch},
+@code{zarch_nohighgprs}, @code{push}, or @code{pop}.
+@code{.machinemode zarch_nohighgprs} can be used to prevent the
+@code{highgprs} flag from being set in the ELF header of the output
+file.  This is useful in situations where the code is gated with a
+runtime check which makes sure that the code is only executed on
+kernels providing the @code{highgprs} feature.
+@code{.machinemode push} saves the currently selected mode, which may
+be restored with @code{.machinemode pop}.
 @end table
 
 @node s390 Floating Point
diff --git a/gas/doc/c-score.texi b/gas/doc/c-score.texi
index da1391b..8335ae7 100644
--- a/gas/doc/c-score.texi
+++ b/gas/doc/c-score.texi
@@ -19,7 +19,7 @@
 * SCORE-Syntax::        Syntax
 @end menu
 
-@node SCORE-Opts 
+@node SCORE-Opts
 @section Options
 
 @cindex options for SCORE
@@ -40,10 +40,10 @@ Assemble code for a big-endian cpu
 @item -EL
 Assemble code for a little-endian cpu
 
-@item -FIXDD 
+@item -FIXDD
 Assemble code for fix data dependency
 
-@item -NWARN 
+@item -NWARN
 Assemble code for no warning message for fix data dependency
 
 @item -SCORE5
@@ -64,7 +64,7 @@ Assemble code for target is SCORE7, this is default setting
 @item -march=score3
 Assemble code for target is SCORE3
 
-@item -USE_R1 
+@item -USE_R1
 Assemble code for no warning message when using temp register r1
 
 @item -KPIC
@@ -75,7 +75,7 @@ assembler to mark the output file as PIC.
 @item -O0
 Assembler will not perform any optimizations
 
-@item -V 
+@item -V
 Sunplus release version
 
 @end table
@@ -89,56 +89,56 @@ A number of assembler directives are available for SCORE.  The
 following table is far from complete.
 
 @table @code
-@item .set nwarn 
-Let the assembler not to generate warnings if the source machine 
+@item .set nwarn
+Let the assembler not to generate warnings if the source machine
 language instructions happen data dependency.
 
-@item .set fixdd 
-Let the assembler to insert bubbles (32 bit nop instruction / 
-16 bit nop! Instruction) if the source machine language instructions 
+@item .set fixdd
+Let the assembler to insert bubbles (32 bit nop instruction /
+16 bit nop! Instruction) if the source machine language instructions
 happen data dependency.
 
-@item .set nofixdd 
-Let the assembler to generate warnings if the source machine 
+@item .set nofixdd
+Let the assembler to generate warnings if the source machine
 language instructions happen data dependency. (Default)
 
 @item .set r1
-Let the assembler not to generate warnings if the source program 
-uses r1. allow user to use r1 
+Let the assembler not to generate warnings if the source program
+uses r1. allow user to use r1
 
 @item set nor1
 Let the assembler to generate warnings if the source program uses
 r1. (Default)
 
 @item .sdata
-Tell the assembler to add subsequent data into the sdata section  
+Tell the assembler to add subsequent data into the sdata section
 
 @item .rdata
 Tell the assembler to add subsequent data into the rdata section
 
 @item .frame "frame-register", "offset", "return-pc-register"
-Describe a stack frame. "frame-register" is the frame register, 
-"offset" is the distance from the frame register to the virtual 
-frame pointer, "return-pc-register" is the return program register. 
-You must use ".ent" before ".frame" and only one ".frame" can be 
-used per ".ent". 
+Describe a stack frame. "frame-register" is the frame register,
+"offset" is the distance from the frame register to the virtual
+frame pointer, "return-pc-register" is the return program register.
+You must use ".ent" before ".frame" and only one ".frame" can be
+used per ".ent".
 
 @item .mask "bitmask", "frameoffset"
-Indicate which of the integer registers are saved in the current 
-function's stack frame, this is for the debugger to explain the 
+Indicate which of the integer registers are saved in the current
+function's stack frame, this is for the debugger to explain the
 frame chain.
 
 @item .ent "proc-name"
-Set the beginning of the procedure "proc_name". Use this directive 
-when you want to generate information for the debugger. 
+Set the beginning of the procedure "proc_name". Use this directive
+when you want to generate information for the debugger.
 
 @item .end proc-name
-Set the end of a procedure. Use this directive to generate information 
-for the debugger. 
+Set the end of a procedure. Use this directive to generate information
+for the debugger.
 
 @item .bss
-Switch the destination of following statements into the bss section, 
-which is used for data that is uninitialized anywhere.  
+Switch the destination of following statements into the bss section,
+which is used for data that is uninitialized anywhere.
 
 @end table
 
diff --git a/gas/doc/c-sh.texi b/gas/doc/c-sh.texi
index 438ac5f..967cea4 100644
--- a/gas/doc/c-sh.texi
+++ b/gas/doc/c-sh.texi
@@ -1,5 +1,5 @@
 @c Copyright 1991, 1992, 1993, 1994, 1995, 1997, 2001, 2003, 2004,
-@c 2005, 2008, 2010, 2011  Free Software Foundation, Inc.
+@c 2005, 2008, 2010, 2011, 2012  Free Software Foundation, Inc.
 @c This is part of the GAS manual.
 @c For copying conditions, see the file as.texinfo.
 @page
@@ -186,21 +186,21 @@ Immediate data
 @cindex floating point, SH (@sc{ieee})
 @cindex SH floating point (@sc{ieee})
 SH2E, SH3E and SH4 groups have on-chip floating-point unit (FPU). Other
-SH groups can use @code{.float} directive to generate @sc{ieee} 
-floating-point numbers. 
+SH groups can use @code{.float} directive to generate @sc{ieee}
+floating-point numbers.
 
-SH2E and SH3E support single-precision floating point calculations as 
-well as entirely PCAPI compatible emulation of double-precision 
+SH2E and SH3E support single-precision floating point calculations as
+well as entirely PCAPI compatible emulation of double-precision
 floating point calculations. SH2E and SH3E instructions are a subset of
 the floating point calculations conforming to the IEEE754 standard.
 
-In addition to single-precision and double-precision floating-point 
-operation capability, the on-chip FPU of SH4 has a 128-bit graphic 
-engine that enables 32-bit floating-point data to be processed 128 
-bits at a time. It also supports 4 * 4 array operations and inner 
-product operations. Also, a superscalar architecture is employed that 
-enables simultaneous execution of two instructions (including FPU 
-instructions), providing performance of up to twice that of 
+In addition to single-precision and double-precision floating-point
+operation capability, the on-chip FPU of SH4 has a 128-bit graphic
+engine that enables 32-bit floating-point data to be processed 128
+bits at a time. It also supports 4 * 4 array operations and inner
+product operations. Also, a superscalar architecture is employed that
+enables simultaneous execution of two instructions (including FPU
+instructions), providing performance of up to twice that of
 conventional architectures at the same frequency.
 
 @node SH Directives
@@ -210,13 +210,16 @@ conventional architectures at the same frequency.
 @cindex machine directives, SH
 @cindex @code{uaword} directive, SH
 @cindex @code{ualong} directive, SH
+@cindex @code{uaquad} directive, SH
 
 @table @code
 @item uaword
 @itemx ualong
-@code{@value{AS}} will issue a warning when a misaligned @code{.word} or
-@code{.long} directive is used.  You may use @code{.uaword} or
-@code{.ualong} to indicate that the value is intentionally misaligned.
+@itemx uaquad
+@code{@value{AS}} will issue a warning when a misaligned @code{.word},
+@code{.long}, or @code{.quad} directive is used.  You may use
+@code{.uaword}, @code{.ualong}, or @code{.uaquad} to indicate that the
+value is intentionally misaligned.
 @end table
 
 @node SH Opcodes
@@ -264,73 +267,73 @@ disp      @r{displacement}
 disp8     @r{8-bit displacement}
 disp12    @r{12-bit displacement}
 
-add #imm,Rn                    lds.l @@Rn+,PR              
-add Rm,Rn                      mac.w @@Rm+,@@Rn+           
-addc Rm,Rn                     mov #imm,Rn                 
-addv Rm,Rn                     mov Rm,Rn                   
-and #imm,R0                    mov.b Rm,@@(R0,Rn)          
-and Rm,Rn                      mov.b Rm,@@-Rn              
-and.b #imm,@@(R0,GBR)           mov.b Rm,@@Rn               
-bf disp8                       mov.b @@(disp,Rm),R0        
-bra disp12                     mov.b @@(disp,GBR),R0       
-bsr disp12                     mov.b @@(R0,Rm),Rn          
-bt disp8                       mov.b @@Rm+,Rn              
-clrmac                         mov.b @@Rm,Rn               
-clrt                           mov.b R0,@@(disp,Rm)        
-cmp/eq #imm,R0                 mov.b R0,@@(disp,GBR)       
-cmp/eq Rm,Rn                   mov.l Rm,@@(disp,Rn)        
-cmp/ge Rm,Rn                   mov.l Rm,@@(R0,Rn)          
-cmp/gt Rm,Rn                   mov.l Rm,@@-Rn              
-cmp/hi Rm,Rn                   mov.l Rm,@@Rn               
-cmp/hs Rm,Rn                   mov.l @@(disp,Rn),Rm        
-cmp/pl Rn                      mov.l @@(disp,GBR),R0       
-cmp/pz Rn                      mov.l @@(disp,PC),Rn        
-cmp/str Rm,Rn                  mov.l @@(R0,Rm),Rn          
-div0s Rm,Rn                    mov.l @@Rm+,Rn              
-div0u                          mov.l @@Rm,Rn               
-div1 Rm,Rn                     mov.l R0,@@(disp,GBR)       
-exts.b Rm,Rn                   mov.w Rm,@@(R0,Rn)          
-exts.w Rm,Rn                   mov.w Rm,@@-Rn              
-extu.b Rm,Rn                   mov.w Rm,@@Rn               
-extu.w Rm,Rn                   mov.w @@(disp,Rm),R0        
-jmp @@Rn                        mov.w @@(disp,GBR),R0       
-jsr @@Rn                        mov.w @@(disp,PC),Rn        
-ldc Rn,GBR                     mov.w @@(R0,Rm),Rn          
-ldc Rn,SR                      mov.w @@Rm+,Rn              
-ldc Rn,VBR                     mov.w @@Rm,Rn               
-ldc.l @@Rn+,GBR                 mov.w R0,@@(disp,Rm)        
-ldc.l @@Rn+,SR                  mov.w R0,@@(disp,GBR)       
-ldc.l @@Rn+,VBR                 mova @@(disp,PC),R0         
-lds Rn,MACH                    movt Rn                     
-lds Rn,MACL                    muls Rm,Rn                  
-lds Rn,PR                      mulu Rm,Rn                  
-lds.l @@Rn+,MACH                neg Rm,Rn                   
-lds.l @@Rn+,MACL                negc Rm,Rn                  
+add #imm,Rn                    lds.l @@Rn+,PR
+add Rm,Rn                      mac.w @@Rm+,@@Rn+
+addc Rm,Rn                     mov #imm,Rn
+addv Rm,Rn                     mov Rm,Rn
+and #imm,R0                    mov.b Rm,@@(R0,Rn)
+and Rm,Rn                      mov.b Rm,@@-Rn
+and.b #imm,@@(R0,GBR)           mov.b Rm,@@Rn
+bf disp8                       mov.b @@(disp,Rm),R0
+bra disp12                     mov.b @@(disp,GBR),R0
+bsr disp12                     mov.b @@(R0,Rm),Rn
+bt disp8                       mov.b @@Rm+,Rn
+clrmac                         mov.b @@Rm,Rn
+clrt                           mov.b R0,@@(disp,Rm)
+cmp/eq #imm,R0                 mov.b R0,@@(disp,GBR)
+cmp/eq Rm,Rn                   mov.l Rm,@@(disp,Rn)
+cmp/ge Rm,Rn                   mov.l Rm,@@(R0,Rn)
+cmp/gt Rm,Rn                   mov.l Rm,@@-Rn
+cmp/hi Rm,Rn                   mov.l Rm,@@Rn
+cmp/hs Rm,Rn                   mov.l @@(disp,Rn),Rm
+cmp/pl Rn                      mov.l @@(disp,GBR),R0
+cmp/pz Rn                      mov.l @@(disp,PC),Rn
+cmp/str Rm,Rn                  mov.l @@(R0,Rm),Rn
+div0s Rm,Rn                    mov.l @@Rm+,Rn
+div0u                          mov.l @@Rm,Rn
+div1 Rm,Rn                     mov.l R0,@@(disp,GBR)
+exts.b Rm,Rn                   mov.w Rm,@@(R0,Rn)
+exts.w Rm,Rn                   mov.w Rm,@@-Rn
+extu.b Rm,Rn                   mov.w Rm,@@Rn
+extu.w Rm,Rn                   mov.w @@(disp,Rm),R0
+jmp @@Rn                        mov.w @@(disp,GBR),R0
+jsr @@Rn                        mov.w @@(disp,PC),Rn
+ldc Rn,GBR                     mov.w @@(R0,Rm),Rn
+ldc Rn,SR                      mov.w @@Rm+,Rn
+ldc Rn,VBR                     mov.w @@Rm,Rn
+ldc.l @@Rn+,GBR                 mov.w R0,@@(disp,Rm)
+ldc.l @@Rn+,SR                  mov.w R0,@@(disp,GBR)
+ldc.l @@Rn+,VBR                 mova @@(disp,PC),R0
+lds Rn,MACH                    movt Rn
+lds Rn,MACL                    muls Rm,Rn
+lds Rn,PR                      mulu Rm,Rn
+lds.l @@Rn+,MACH                neg Rm,Rn
+lds.l @@Rn+,MACL                negc Rm,Rn
 @page
-nop                            stc VBR,Rn                
-not Rm,Rn                      stc.l GBR,@@-Rn           
-or #imm,R0                     stc.l SR,@@-Rn            
-or Rm,Rn                       stc.l VBR,@@-Rn           
-or.b #imm,@@(R0,GBR)            sts MACH,Rn               
-rotcl Rn                       sts MACL,Rn               
-rotcr Rn                       sts PR,Rn                 
-rotl Rn                        sts.l MACH,@@-Rn          
-rotr Rn                        sts.l MACL,@@-Rn          
-rte                            sts.l PR,@@-Rn            
-rts                            sub Rm,Rn                 
-sett                           subc Rm,Rn                
-shal Rn                        subv Rm,Rn                
-shar Rn                        swap.b Rm,Rn              
-shll Rn                        swap.w Rm,Rn              
-shll16 Rn                      tas.b @@Rn                
-shll2 Rn                       trapa #imm                
-shll8 Rn                       tst #imm,R0               
-shlr Rn                        tst Rm,Rn                 
-shlr16 Rn                      tst.b #imm,@@(R0,GBR)     
-shlr2 Rn                       xor #imm,R0               
-shlr8 Rn                       xor Rm,Rn                 
-sleep                          xor.b #imm,@@(R0,GBR)     
-stc GBR,Rn                     xtrct Rm,Rn               
+nop                            stc VBR,Rn
+not Rm,Rn                      stc.l GBR,@@-Rn
+or #imm,R0                     stc.l SR,@@-Rn
+or Rm,Rn                       stc.l VBR,@@-Rn
+or.b #imm,@@(R0,GBR)            sts MACH,Rn
+rotcl Rn                       sts MACL,Rn
+rotcr Rn                       sts PR,Rn
+rotl Rn                        sts.l MACH,@@-Rn
+rotr Rn                        sts.l MACL,@@-Rn
+rte                            sts.l PR,@@-Rn
+rts                            sub Rm,Rn
+sett                           subc Rm,Rn
+shal Rn                        subv Rm,Rn
+shar Rn                        swap.b Rm,Rn
+shll Rn                        swap.w Rm,Rn
+shll16 Rn                      tas.b @@Rn
+shll2 Rn                       trapa #imm
+shll8 Rn                       tst #imm,R0
+shlr Rn                        tst Rm,Rn
+shlr16 Rn                      tst.b #imm,@@(R0,GBR)
+shlr2 Rn                       xor #imm,R0
+shlr8 Rn                       xor Rm,Rn
+sleep                          xor.b #imm,@@(R0,GBR)
+stc GBR,Rn                     xtrct Rm,Rn
 stc SR,Rn
 @end smallexample
 @end ifset
diff --git a/gas/doc/c-sh64.texi b/gas/doc/c-sh64.texi
index 8138c1f..6857f29 100644
--- a/gas/doc/c-sh64.texi
+++ b/gas/doc/c-sh64.texi
@@ -1,4 +1,4 @@
-@c Copyright (C) 2002, 2003, 2008, 2011 Free Software Foundation, Inc.
+@c Copyright (C) 2002, 2003, 2008, 2011, 2012 Free Software Foundation, Inc.
 @c This is part of the GAS manual.
 @c For copying conditions, see the file as.texinfo.
 @page
@@ -185,13 +185,9 @@ command line.
 
 @item .abi [32|64]
 Specify the ABI for the following instructions.  Note that you cannot use
-this directive unless you specified an ABI on the command line, and the 
+this directive unless you specified an ABI on the command line, and the
 ABIs specified must match.
 
-@item .uaquad
-Like .uaword and .ualong, this allows you to specify an intentionally
-unaligned quadword (64 bit word).
-
 @end table
 
 @node SH64 Opcodes
diff --git a/gas/doc/c-sparc.texi b/gas/doc/c-sparc.texi
index 099c031..a47e8b2 100644
--- a/gas/doc/c-sparc.texi
+++ b/gas/doc/c-sparc.texi
@@ -584,9 +584,24 @@ also be generated using @samp{%ulo}.
 @item
 @code{R_SPARC_M44} is requested using @samp{%m44}.
 @item
-@code{R_SPARC_L44} is requested using @samp{%l44}.
+@code{R_SPARC_L44} is requested using @samp{%l44} or @samp{%l34}.
+@item
+@code{R_SPARC_H34} is requested using @samp{%h34}.
 @end itemize
 
+The @samp{%l34} generates a @code{R_SPARC_L44} relocation because it
+calculates the necessary value, and therefore no explicit
+@code{R_SPARC_L34} relocation needed to be created for this purpose.
+
+The @samp{%h34} and @samp{%l34} relocations are used for the abs34 code
+model.  Here is an example abs34 address generation sequence:
+
+@example
+sethi %h34(symbol), %g1
+sllx  %g1, 2, %g1
+or    %g1, %l34(symbol), %g1
+@end example
+
 The PC relative relocation @code{R_SPARC_PC22} can be obtained by
 enclosing an operand inside of @samp{%pc22}.  Likewise, the
 @code{R_SPARC_PC10} relocation can be obtained using @samp{%pc10}.
diff --git a/gas/doc/c-tic54x.texi b/gas/doc/c-tic54x.texi
index ab54896..8a37316 100644
--- a/gas/doc/c-tic54x.texi
+++ b/gas/doc/c-tic54x.texi
@@ -41,7 +41,7 @@ You can use the @samp{-mfar-mode} option to enable extended addressing mode.
 All addresses will be assumed to be > 16 bits, and the appropriate
 relocation types will be used.  This option is equivalent to using the
 @samp{.far_mode} directive in the assembly code.  If you do not use the
-@samp{-mfar-mode} option, all references will be assumed to be 16 bits.  
+@samp{-mfar-mode} option, all references will be assumed to be 16 bits.
 This option may be abbreviated to @samp{-mf}.
 
 @cindex @samp{-mcpu} option, cpu
@@ -49,14 +49,14 @@ You can use the @samp{-mcpu} option to specify a particular CPU.
 This option is equivalent to using the @samp{.version} directive in the
 assembly code.  For recognized CPU codes, see
 @xref{TIC54X-Directives,,@code{.version}}.  The default CPU version is
-@samp{542}.   
+@samp{542}.
 
 @cindex @samp{-merrors-to-file} option, stderr redirect
 @cindex @samp{-me} option, stderr redirect
 You can use the @samp{-merrors-to-file} option to redirect error output
 to a file (this provided for those deficient environments which don't
 provide adequate output redirection).  This option may be abbreviated to
-@samp{-me}. 
+@samp{-me}.
 
 @node TIC54X-Block
 @section Blocking
@@ -96,21 +96,21 @@ A subset of allowable symbols (which we'll call subsyms) may be assigned
 arbitrary string values.  This is roughly equivalent to C preprocessor
 #define macros.  When @code{@value{AS}} encounters one of these
 symbols, the symbol is replaced in the input stream by its string value.
-Subsym names @strong{must} begin with a letter. 
+Subsym names @strong{must} begin with a letter.
 
 Subsyms may be defined using the @code{.asg} and @code{.eval} directives
 (@xref{TIC54X-Directives,,@code{.asg}},
-@xref{TIC54X-Directives,,@code{.eval}}. 
+@xref{TIC54X-Directives,,@code{.eval}}.
 
 Expansion is recursive until a previously encountered symbol is seen, at
-which point substitution stops.  
+which point substitution stops.
 
 In this example, x is replaced with SYM2; SYM2 is replaced with SYM1, and SYM1
 is replaced with x.  At this point, x has already been encountered
 and the substitution stops.
 
-@smallexample @code
- .asg   "x",SYM1 
+@smallexample
+ .asg   "x",SYM1
  .asg   "SYM1",SYM2
  .asg   "SYM2",x
  add    x,a             ; final code assembled is "add  x, a"
@@ -124,7 +124,7 @@ directive is used to identify the subsym as a local macro variable
 
 Substitution may be forced in situations where replacement might be
 ambiguous by placing colons on either side of the subsym.  The following
-code: 
+code:
 
 @smallexample
  .eval  "10",x
@@ -156,7 +156,7 @@ Local labels may be defined in two ways:
 @item
 $N, where N is a decimal number between 0 and 9
 @item
-LABEL?, where LABEL is any legal symbol name.  
+LABEL?, where LABEL is any legal symbol name.
 @end itemize
 
 Local labels thus defined may be redefined or automatically generated.
@@ -184,7 +184,7 @@ The macro scope where the label was defined is exited
 The following built-in functions may be used to generate a
 floating-point value.  All return a floating-point value except
 @samp{$cvi}, @samp{$int}, and @samp{$sgn}, which return an integer
-value. 
+value.
 
 @table @code
 @cindex @code{$acos} math builtin, TIC54X
@@ -335,7 +335,7 @@ equivalent to @code{.align} with a @var{size} of 2.
 Align SPC to word boundary
 @item 2
 Align SPC to longword boundary (same as .even)
-@item 128       
+@item 128
 Align SPC to page boundary
 @end table
 
@@ -348,7 +348,7 @@ performed on @var{string} before assignment.
 @item .eval @var{string}, @var{name}
 Evaluate the contents of string @var{string} and assign the result as a
 string to the subsym @var{name}.  String replacement is performed on
-@var{string} before assignment. 
+@var{string} before assignment.
 
 @cindex @code{bss} directive, TIC54X
 @item .bss @var{symbol}, @var{size} [, [@var{blocking_flag}] [,@var{alignment_flag}]]
@@ -404,7 +404,7 @@ Begin assembling code into the .data section.
 Place an IEEE single-precision floating-point representation of one or
 more floating-point values into the current section.  All but
 @code{.xfloat} align the result on a longword boundary.  Values are
-stored most-significant word first. 
+stored most-significant word first.
 
 @cindex @code{drlist} directive, TIC54X
 @cindex @code{drnolist} directive, TIC54X
@@ -473,7 +473,7 @@ the current file but defined elsewhere.  Both map to the standard
 @itemx .uword @var{value} [,...,@var{value_n}]
 Place one or more values into consecutive words of the current section.
 If a label is used, it points to the word allocated for the first value
-encountered. 
+encountered.
 
 @cindex @code{label} directive, TIC54X
 @item .label @var{symbol}
@@ -501,7 +501,7 @@ Control whether the source listing is printed.  Ignored.
 Place one or more 32-bit values into consecutive words in the current
 section.  The most significant word is stored first.  @code{.long} and
 @code{.ulong} align the result on a longword boundary; @code{xlong} does
-not. 
+not.
 
 @cindex @code{loop} directive, TIC54X
 @cindex @code{break} directive, TIC54X
@@ -568,7 +568,7 @@ Define a named initialized section and make it the current section.
 @item @var{symbol} .set "@var{value}"
 @itemx @var{symbol} .equ "@var{value}"
 Equate a constant @var{value} to a @var{symbol}, which is placed in the
-symbol table.  @var{symbol} may not be previously defined.  
+symbol table.  @var{symbol} may not be previously defined.
 
 @cindex @code{space} directive, TIC54X
 @cindex @code{bes} directive, TIC54X
@@ -628,7 +628,7 @@ The @code{.tag} directive, in addition to being used to define a
 structure/union element within a structure, may be used to apply a
 structure to a symbol.  Once applied to @var{label}, the individual
 structure elements may be applied to @var{label} to produce the desired
-offsets using @var{label} as the structure base. 
+offsets using @var{label} as the structure base.
 
 @cindex @code{tab} directive, TIC54X
 @item .tab
@@ -637,7 +637,7 @@ Set the tab size in the output listing.  Ignored.
 @cindex @code{union} directive, TIC54X
 @cindex @code{tag} directive, TIC54X
 @cindex @code{endunion} directive, TIC54X
-@item [@var{utag}] .union 
+@item [@var{utag}] .union
 @itemx [@var{name_1}] element [@var{count_1}]
 @itemx [@var{name_2}] element [@var{count_2}]
 @itemx [@var{tname}] .tag @var{utagx}[,@var{tcount}]
@@ -658,12 +658,12 @@ The symbol may be used as a variable name.  @var{size} is the allocated
 size in words.  @var{blocking_flag} indicates whether to block this
 section on a page boundary (128 words) (@pxref{TIC54X-Block}).
 @var{alignment flag} indicates whether the section should be
-longword-aligned.  
+longword-aligned.
 
 @cindex @code{var} directive, TIC54X
 @item .var @var{sym}[,..., @var{sym_n}]
 Define a subsym to be a local variable within a macro.  See
-@xref{TIC54X-Macros}. 
+@xref{TIC54X-Macros}.
 
 @cindex @code{version} directive, TIC54X
 @item .version @var{version}
@@ -686,7 +686,7 @@ values are accepted, the op is ignored.
 
 @cindex TIC54X-specific macros
 @cindex macros, TIC54X
-Macros do not require explicit dereferencing of arguments (i.e., \ARG).  
+Macros do not require explicit dereferencing of arguments (i.e., \ARG).
 
 During macro expansion, the macro parameters are converted to subsyms.
 If the number of arguments passed the macro invocation exceeds the
@@ -709,17 +709,17 @@ Returns the length of @var{str}.
 
 @cindex @code{$symcmp} subsym builtin, TIC54X
 @item @code{$symcmp(@var{str1},@var{str2})}
-Returns 0 if @var{str1} == @var{str2}, non-zero otherwise.  
+Returns 0 if @var{str1} == @var{str2}, non-zero otherwise.
 
 @cindex @code{$firstch} subsym builtin, TIC54X
 @item @code{$firstch(@var{str},@var{ch})}
 Returns index of the first occurrence of character constant @var{ch} in
-@var{str}. 
+@var{str}.
 
 @cindex @code{$lastch} subsym builtin, TIC54X
 @item @code{$lastch(@var{str},@var{ch})}
 Returns index of the last occurrence of character constant @var{ch} in
-@var{str}. 
+@var{str}.
 
 @cindex @code{$isdefed} subsym builtin, TIC54X
 @item @code{$isdefed(@var{symbol})}
diff --git a/gas/doc/c-tic6x.texi b/gas/doc/c-tic6x.texi
index bc69160..a39a9a7 100644
--- a/gas/doc/c-tic6x.texi
+++ b/gas/doc/c-tic6x.texi
@@ -171,7 +171,6 @@ entry for that function.  Anything between this directive and the
 @code{.endp} directive will be added to the exception table entry.
 
 Must be preceded by a CFI block containing a @code{.cfi_lsda} directive.
-directive.
 
 @cindex @code{.nocmp} directive, TIC6X
 @item .nocmp
@@ -180,7 +179,7 @@ section.
 
 @cindex @code{.personalityindex} directive, TIC6X
 @item .personalityindex @var{index}
-Sets the personality routine for the current function to the ABI specified 
+Sets the personality routine for the current function to the ABI specified
 compact routine number @var{index}
 
 @cindex @code{.personality} directive, TIC6X
diff --git a/gas/doc/c-tilegx.texi b/gas/doc/c-tilegx.texi
index 66dd5a3..0d8c038 100644
--- a/gas/doc/c-tilegx.texi
+++ b/gas/doc/c-tilegx.texi
@@ -33,6 +33,11 @@ The following table lists all available TILE-Gx specific options:
 @item -m32 | -m64
 Select the word size, either 32 bits or 64 bits.
 
+@cindex @samp{-EB} option, TILE-Gx
+@cindex @samp{-EL} option, TILE-Gx
+@item -EB | -EL
+Select the endianness, either big-endian (-EB) or little-endian (-EL).
+
 @end table
 @c man end
 
@@ -213,21 +218,6 @@ shl16insli r0, r0, hw0(sym)
 This modifier is used to load bits 0-15 of the symbol's offset in the
 GOT entry corresponding to the symbol.
 
-@item hw1_got
-
-This modifier is used to load bits 16-31 of the symbol's offset in the
-GOT entry corresponding to the symbol.
-
-@item hw2_got
-
-This modifier is used to load bits 32-47 of the symbol's offset in the
-GOT entry corresponding to the symbol.
-
-@item hw3_got
-
-This modifier is used to load bits 48-63 of the symbol's offset in the
-GOT entry corresponding to the symbol.
-
 @item hw0_last_got
 
 This modifier yields the same value as @code{hw0_got}, but it also
@@ -235,13 +225,9 @@ checks that the value does not overflow.
 
 @item hw1_last_got
 
-This modifier yields the same value as @code{hw1_got}, but it also
-checks that the value does not overflow.
-
-@item hw2_last_got
-
-This modifier yields the same value as @code{hw2_got}, but it also
-checks that the value does not overflow.
+This modifier is used to load bits 16-31 of the symbol's offset in the
+GOT entry corresponding to the symbol, and it also checks that the
+value does not overflow.
 
 @item plt
 
@@ -256,29 +242,31 @@ called (at latest; depending environment variables).  It is only safe
 to leave the symbol unresolved this way if all references are function
 calls.
 
-@item hw0_tls_gd
+@item hw0_plt
 
-This modifier is used to load bits 0-15 of the offset of the GOT entry
-of the symbol's TLS descriptor, to be used for general-dynamic TLS
-accesses.
+This modifier is used to load bits 0-15 of the pc-relative address of
+a plt entry.
 
-@item hw1_tls_gd
+@item hw1_plt
 
-This modifier is used to load bits 16-31 of the offset of the GOT
-entry of the symbol's TLS descriptor, to be used for general-dynamic
-TLS accesses.
+This modifier is used to load bits 16-31 of the pc-relative address of
+a plt entry.
 
-@item hw2_tls_gd
+@item hw1_last_plt
 
-This modifier is used to load bits 32-47 of the offset of the GOT
-entry of the symbol's TLS descriptor, to be used for general-dynamic
-TLS accesses.
+This modifier yields the same value as @code{hw1_plt}, but it also
+checks that the value does not overflow.
 
-@item hw3_tls_gd
+@item hw2_last_plt
 
-This modifier is used to load bits 48-63 of the offset of the GOT
-entry of the symbol's TLS descriptor, to be used for general-dynamic
-TLS accesses.
+This modifier is used to load bits 32-47 of the pc-relative address of
+a plt entry, and it also checks that the value does not overflow.
+
+@item hw0_tls_gd
+
+This modifier is used to load bits 0-15 of the offset of the GOT entry
+of the symbol's TLS descriptor, to be used for general-dynamic TLS
+accesses.
 
 @item hw0_last_tls_gd
 
@@ -287,13 +275,9 @@ checks that the value does not overflow.
 
 @item hw1_last_tls_gd
 
-This modifier yields the same value as @code{hw1_tls_gd}, but it also
-checks that the value does not overflow.
-
-@item hw2_last_tls_gd
-
-This modifier yields the same value as @code{hw2_tls_gd}, but it also
-checks that the value does not overflow.
+This modifier is used to load bits 16-31 of the offset of the GOT
+entry of the symbol's TLS descriptor, to be used for general-dynamic
+TLS accesses.  It also checks that the value does not overflow.
 
 @item hw0_tls_ie
 
@@ -301,38 +285,48 @@ This modifier is used to load bits 0-15 of the offset of the GOT entry
 containing the offset of the symbol's address from the TCB, to be used
 for initial-exec TLS accesses.
 
-@item hw1_tls_ie
+@item hw0_last_tls_ie
+
+This modifier yields the same value as @code{hw0_tls_ie}, but it also
+checks that the value does not overflow.
+
+@item hw1_last_tls_ie
 
 This modifier is used to load bits 16-31 of the offset of the GOT
 entry containing the offset of the symbol's address from the TCB, to
-be used for initial-exec TLS accesses.
+be used for initial-exec TLS accesses.  It also checks that the value
+does not overflow.
 
-@item hw2_tls_ie
+@item hw0_tls_le
 
-This modifier is used to load bits 32-47 of the offset of the GOT entry
-containing the offset of the symbol's address from the TCB, to be used
-for initial-exec TLS accesses.
+This modifier is used to load bits 0-15 of the offset of the symbol's
+address from the TCB, to be used for local-exec TLS accesses.
 
-@item hw3_tls_ie
+@item hw0_last_tls_le
 
-This modifier is used to load bits 48-63 of the offset of the GOT
-entry containing the offset of the symbol's address from the TCB, to
-be used for initial-exec TLS accesses.
+This modifier yields the same value as @code{hw0_tls_le}, but it also
+checks that the value does not overflow.
 
-@item hw0_last_tls_ie
+@item hw1_last_tls_le
 
-This modifier yields the same value as @code{hw0_tls_ie}, but it also
-checks that the value does not overflow.
+This modifier is used to load bits 16-31 of the offset of the symbol's
+address from the TCB, to be used for local-exec TLS accesses.  It
+also checks that the value does not overflow.
 
-@item hw1_last_tls_ie
+@item tls_gd_call
 
-This modifier yields the same value as @code{hw1_tls_ie}, but it also
-checks that the value does not overflow.
+This modifier is used to tag an instrution as the ``call'' part of a
+calling sequence for a TLS GD reference of its operand.
 
-@item hw2_last_tls_ie
+@item tls_gd_add
 
-This modifier yields the same value as @code{hw2_tls_ie}, but it also
-checks that the value does not overflow.
+This modifier is used to tag an instruction as the ``add'' part of a
+calling sequence for a TLS GD reference of its operand.
+
+@item tls_ie_load
+
+This modifier is used to tag an instruction as the ``load'' part of a
+calling sequence for a TLS IE reference of its operand.
 
 @end table
 
diff --git a/gas/doc/c-tilepro.texi b/gas/doc/c-tilepro.texi
index bbccdfb..5d80c4f 100644
--- a/gas/doc/c-tilepro.texi
+++ b/gas/doc/c-tilepro.texi
@@ -261,6 +261,41 @@ to be used for initial-exec TLS accesses.
 This modifier is like @code{tls_ie_hi16}, but it adds one to the value
 if @code{tls_ie_lo16} of the input value is negative.
 
+@item tls_le
+
+This modifier is used to load the offset of the symbol's address from
+the TCB, to be used for local-exec TLS accesses.
+
+@item tls_le_lo16
+
+This modifier is used to load the low 16 bits of the offset of the
+symbol's address from the TCB, to be used for local-exec TLS accesses.
+
+@item tls_le_hi16
+
+This modifier is used to load the high 16 bits of the offset of the
+symbol's address from the TCB, to be used for local-exec TLS accesses.
+
+@item tls_le_ha16
+
+This modifier is like @code{tls_le_hi16}, but it adds one to the value
+if @code{tls_le_lo16} of the input value is negative.
+
+@item tls_gd_call
+
+This modifier is used to tag an instrution as the ``call'' part of a
+calling sequence for a TLS GD reference of its operand.
+
+@item tls_gd_add
+
+This modifier is used to tag an instruction as the ``add'' part of a
+calling sequence for a TLS GD reference of its operand.
+
+@item tls_ie_load
+
+This modifier is used to tag an instruction as the ``load'' part of a
+calling sequence for a TLS IE reference of its operand.
+
 @end table
 
 @node TILEPro Directives
diff --git a/gas/doc/c-v850.texi b/gas/doc/c-v850.texi
index 1eb16d7..2516a83 100644
--- a/gas/doc/c-v850.texi
+++ b/gas/doc/c-v850.texi
@@ -1,4 +1,4 @@
-@c Copyright 1997, 2002, 2003, 2006, 2011 Free Software Foundation, Inc.
+@c Copyright 1997-2013 Free Software Foundation, Inc.
 @c This is part of the GAS manual.
 @c For copying conditions, see the file as.texinfo.
 
@@ -80,6 +80,16 @@ Specifies that the assembled code should be marked as being targeted at
 the V850E2V3 processor.  This allows the linker to detect attempts to link
 such code with code assembled for other processors.
 
+@cindex @code{-mv850e2v4} command line option, V850
+@item -mv850e2v4
+This is an alias for @option{-mv850e3v5}.
+
+@cindex @code{-mv850e3v5} command line option, V850
+@item -mv850e3v5
+Specifies that the assembled code should be marked as being targeted at
+the V850E3V5 processor.  This allows the linker to detect attempts to link
+such code with code assembled for other processors.
+
 @cindex @code{-mrelax} command line option, V850
 @item -mrelax
 Enables relaxation.  This allows the .longcall and .longjump pseudo
@@ -88,8 +98,27 @@ of code which are either a long function call or a long branch.  The
 assembler will then flag these sections of code and the linker will
 attempt to relax them.
 
-@end table
+@cindex @code{-mgcc-abi} command line option, V850
+@item -mgcc-abi
+Marks the generated objecy file as supporting the old GCC ABI.
+
+@cindex @code{-mrh850-abi} command line option, V850
+@item -mrh850-abi
+Marks the generated objecy file as supporting the RH850 ABI.  This is
+the default.
 
+@cindex @code{-m8byte-align} command line option, V850
+@item -m8byte-align
+Marks the generated objecy file as supporting a maximum 64-bits of
+alignment for variables defined in the source code.
+
+@cindex @code{-m4byte-align} command line option, V850
+@item -m4byte-align
+Marks the generated objecy file as supporting a maximum 32-bits of
+alignment for variables defined in the source code.  This is the
+default.
+
+@end table
 
 @node V850 Syntax
 @section Syntax
@@ -245,13 +274,13 @@ The V850 family uses @sc{ieee} floating-point numbers.
 @table @code
 @cindex @code{offset} directive, V850
 @item .offset @var{<expression>}
-Moves the offset into the current section to the specified amount. 
+Moves the offset into the current section to the specified amount.
 
 @cindex @code{section} directive, V850
 @item .section "name", <type>
 This is an extension to the standard .section directive.  It sets the
 current section to be <type> and creates an alias for this section
-called "name". 
+called "name".
 
 @cindex @code{.v850} directive, V850
 @item .v850
@@ -283,6 +312,18 @@ Specifies that the assembled code should be marked as being targeted at
 the V850E2V3 processor.  This allows the linker to detect attempts to link
 such code with code assembled for other processors.
 
+@cindex @code{.v850e2v4} directive, V850
+@item .v850e2v4
+Specifies that the assembled code should be marked as being targeted at
+the V850E3V5 processor.  This allows the linker to detect attempts to link
+such code with code assembled for other processors.
+
+@cindex @code{.v850e3v5} directive, V850
+@item .v850e3v5
+Specifies that the assembled code should be marked as being targeted at
+the V850E3V5 processor.  This allows the linker to detect attempts to link
+such code with code assembled for other processors.
+
 @end table
 
 @node V850 Opcodes
@@ -306,7 +347,7 @@ the immediate operand field of the given instruction.  For example:
 computes the difference between the address of labels 'here' and
 'there', takes the upper 16 bits of this difference, shifts it down 16
 bits and then multiplies it by the lower 16 bits in register 5, putting
-the result into register 6. 
+the result into register 6.
 
 @cindex @code{lo} pseudo-op, V850
 @item lo()
@@ -350,14 +391,14 @@ mov instruction).  For example:
     @samp{mov hilo(here), r6}
 
 computes the absolute address of label 'here' and puts the result into
-register 6.  
+register 6.
 
 @cindex @code{sdaoff} pseudo-op, V850
 @item sdaoff()
 Computes the offset of the named variable from the start of the Small
 Data Area (whoes address is held in register 4, the GP register) and
 stores the result as a 16 bit signed value in the immediate operand
-field of the given instruction.  For example: 
+field of the given instruction.  For example:
 
       @samp{ld.w sdaoff(_a_variable)[gp],r6}
 
diff --git a/gas/doc/c-xc16x.texi b/gas/doc/c-xc16x.texi
index cd7688f..9589139 100644
--- a/gas/doc/c-xc16x.texi
+++ b/gas/doc/c-xc16x.texi
@@ -35,7 +35,7 @@ This assembles a word (16-bit) constant.
 
 @cindex @code{ascii} directive, xc16x
 @item .ascii "@var{ascii}"
-This directive used for copying @var{str} into the object file. 
+This directive used for copying @var{str} into the object file.
 The string is terminated with a null byte.
 
 @cindex @code{set} directive, xc16x
@@ -52,7 +52,7 @@ Reserve @var{length} bytes in the bss section for a local @var{symbol},
 aligned to the power of two specified by @var{align}.  @var{length} and
 @var{align} must be positive absolute expressions.  This directive
 differs from @samp{.lcomm} only in that it permits you to specify
-an alignment.  
+an alignment.
 @end table
 
 @node xc16x Syntax
diff --git a/gas/doc/c-xtensa.texi b/gas/doc/c-xtensa.texi
index 67c6f15..bf5b38b 100644
--- a/gas/doc/c-xtensa.texi
+++ b/gas/doc/c-xtensa.texi
@@ -629,7 +629,7 @@ both directives and command-line flags.
 @subsection literal
 @cindex @code{literal} directive
 
-The @code{.literal} directive is used to define literal pool data, i.e., 
+The @code{.literal} directive is used to define literal pool data, i.e.,
 read-only 32-bit data accessed via @code{L32R} instructions.
 
 @smallexample
@@ -727,7 +727,7 @@ The @code{.literal_position} directive is ignored when the
 @samp{--text-@-section-@-literals} option is not used or when
 @code{L32R} instructions use the absolute addressing mode.
 
-The assembler will automatically place text section literal pools 
+The assembler will automatically place text section literal pools
 before @code{ENTRY} instructions, so the @code{.literal_position}
 directive is only needed to specify some other location for a literal
 pool.  You may need to add an explicit jump instruction to skip over an
diff --git a/gas/doc/c-z80.texi b/gas/doc/c-z80.texi
index 82cdf80..df5a65f 100644
--- a/gas/doc/c-z80.texi
+++ b/gas/doc/c-z80.texi
@@ -70,14 +70,14 @@ for the R800 processor, as far as they exist.
 The assembler syntax closely follows the 'Z80 family CPU User Manual' by
 Zilog.
 In expressions a single @samp{=} may be used as ``is equal to''
-comparison operator.  
+comparison operator.
 
 Suffices can be used to indicate the radix of integer constants;
 @samp{H} or @samp{h} for hexadecimal, @samp{D} or @samp{d} for decimal,
 @samp{Q}, @samp{O}, @samp{q} or @samp{o} for octal, and @samp{B} for
 binary.
 
-The suffix @samp{b} denotes a backreference to local label.  
+The suffix @samp{b} denotes a backreference to local label.
 
 @menu
 * Z80-Chars::                Special Characters
@@ -90,7 +90,7 @@ The suffix @samp{b} denotes a backreference to local label.
 
 @cindex line comment character, Z80
 @cindex Z80 line comment character
-The semicolon @samp{;} is the line comment character; 
+The semicolon @samp{;} is the line comment character;
 
 If a @samp{#} appears as the first character of a line then the whole
 line is treated as a comment, but in this case the line could also be
@@ -111,7 +111,7 @@ and as a symbol denoting the current location counter.
 @cindex character escapes, Z80
 @cindex Z80, \
 A backslash @samp{\} is an ordinary character for the Z80 assembler.
- 
+
 @cindex character constant, Z80
 @cindex single quote, Z80
 @cindex Z80 '
@@ -125,9 +125,9 @@ a string constant.
 @cindex register names, Z80
 
 The registers are referred to with the letters assigned to them by
-Zilog. In addition @command{@value{AS}} recognizes @samp{ixl} and 
+Zilog. In addition @command{@value{AS}} recognizes @samp{ixl} and
 @samp{ixh} as the least and most significant octet in @samp{ix}, and
-similarly @samp{iyl} and  @samp{iyh} as parts of @samp{iy}. 
+similarly @samp{iyl} and  @samp{iyh} as parts of @samp{iy}.
 
 @c The @samp{'} in @samp{ex af,af'} may be omitted.
 
@@ -137,7 +137,7 @@ similarly @samp{iyl} and  @samp{iyh} as parts of @samp{iy}.
 @cindex case sensitivity, Z80
 
 Upper and lower case are equivalent in register names, opcodes,
-condition codes  and assembler directives. 
+condition codes  and assembler directives.
 The case of letters is significant in labels and symbol names. The case
 is also important to distinguish the suffix @samp{b} for a backward reference
 to a local label from the suffix @samp{B} for a number in binary notation.
@@ -152,7 +152,7 @@ Floating-point numbers are not supported.
 @section Z80 Assembler Directives
 
 @command{@value{AS}} for the Z80 supports some additional directives for
-compatibility with other assemblers. 
+compatibility with other assemblers.
 
 @cindex Z80-only directives
 These are the additional directives in @code{@value{AS}} for the Z80:
@@ -161,27 +161,27 @@ These are the additional directives in @code{@value{AS}} for the Z80:
 @item db @var{expression}|@var{string}[,@var{expression}|@var{string}...]
 @itemx defb @var{expression}|@var{string}[,@var{expression}|@var{string}...]
 For each @var{string} the characters are copied to the object file, for
-each other @var{expression} the value is stored in one byte. 
-A warning is issued in case of an overflow. 
+each other @var{expression} the value is stored in one byte.
+A warning is issued in case of an overflow.
 
 @item dw @var{expression}[,@var{expression}...]
 @itemx defw @var{expression}[,@var{expression}...]
 For each @var{expression} the value is stored in two bytes, ignoring
-overflow. 
+overflow.
 
 @item d24 @var{expression}[,@var{expression}...]
 @itemx def24 @var{expression}[,@var{expression}...]
 For each @var{expression} the value is stored in three bytes, ignoring
-overflow. 
+overflow.
 
 @item d32 @var{expression}[,@var{expression}...]
 @itemx def32 @var{expression}[,@var{expression}...]
 For each @var{expression} the value is stored in four bytes, ignoring
-overflow. 
+overflow.
 
 @item ds @var{count}[, @var{value}]
 @itemx defs @var{count}[, @var{value}]
-@c Synonyms for @code{ds.b}, 
+@c Synonyms for @code{ds.b},
 @c which should have been described elsewhere
 Fill @var{count} bytes in the object file with @var{value}, if
 @var{value} is omitted it defaults to zero.
@@ -193,10 +193,10 @@ These directives set the value of @var{symbol} to @var{expression}. If
 Symbols defined with @code{equ} are not protected from redefinition.
 
 @item set
-This is a normal instruction on Z80, and not an assembler directive. 
+This is a normal instruction on Z80, and not an assembler directive.
 
 @item psect @var{name}
-A synonym for @xref{Section}, no second argument should be given. 
+A synonym for @xref{Section}, no second argument should be given.
 @ignore
 
 The following attributes will possibly be recognized in the future
@@ -224,7 +224,7 @@ The section is marked as read only.
 @node Z80 Opcodes
 @section Opcodes
 In line with common practice, Z80 mnemonics are used for both the Z80 and
-the R800. 
+the R800.
 
 In many instructions it is possible to use one of the half index
 registers (@samp{ixl},@samp{ixh},@samp{iyl},@samp{iyh}) in stead of an
@@ -245,7 +245,7 @@ be any operand that is valid for @samp{sla}. One can use @samp{sll} as a
 synonym for @samp{sli}.
 
 @item @var{op} (ix+@var{d}), @var{r}
-This is equivalent to 
+This is equivalent to
 
 @example
 ld @var{r}, (ix+@var{d})
diff --git a/gas/doc/h8.texi b/gas/doc/h8.texi
index 6eb02f8..2b9e9dd 100644
--- a/gas/doc/h8.texi
+++ b/gas/doc/h8.texi
@@ -1,3 +1,8 @@
+@c Copyright 2012
+@c Free Software Foundation, Inc.
+@c This is part of the GAS manual.
+@c For copying conditions, see the file as.texinfo.
+
 @clear ALL-ARCH
 @clear GENERIC
 @clear INTERNALS
diff --git a/gas/doc/internals.texi b/gas/doc/internals.texi
index 58b5686..cf15fb5 100644
--- a/gas/doc/internals.texi
+++ b/gas/doc/internals.texi
@@ -1250,7 +1250,7 @@ It may also create any necessary relocations.
 @cindex TC_FINALIZE_SYMS_BEFORE_SIZE_SEG
 Specifies the value to be assigned to @code{finalize_syms} before the function
 @code{size_segs} is called.  Since @code{size_segs} calls @code{cvt_frag_to_fill}
-which can call @code{md_convert_frag}, this constant governs whether the symbols 
+which can call @code{md_convert_frag}, this constant governs whether the symbols
 accessed in @code{md_convert_frag} will be fully resolved.  In particular it
 governs whether local symbols will have been resolved, and had their frag
 information removed.  Depending upon the processing performed by
@@ -1306,8 +1306,7 @@ This macro controls resolution of fixup expressions involving the
 difference of two symbols in the same section.  If this macro returns zero,
 the subtrahend will be resolved and @code{fx_subsy} set to @code{NULL} for
 @code{md_apply_fix}.  If undefined, the default of
-@w{@code{! SEG_NORMAL (@var{seg}) || TC_FORCE_RELOCATION (@var{fix})}} will
-be used.
+@w{@code{! SEG_NORMAL (@var{seg})}} will be used.
 
 @item TC_FORCE_RELOCATION_SUB_ABS (@var{fix}, @var{seg})
 @cindex TC_FORCE_RELOCATION_SUB_ABS
-- 
1.8.2.1

